uuu_version 1.4.165

# Boot flash.bin.signed
SDPS: boot -f flash.bin.signed

# use uboot burn bootloader to eMMC
FB: ucmd setenv fastboot_dev mmc
FB: ucmd setenv mmcdev ${emmc_dev}
FB: flash bootloader flash.bin.signed

FB: ucmd if env exists emmc_ack; then ; else setenv emmc_ack 0; fi;
FB: ucmd setenv emmc_cmd mmc partconf ${emmc_dev} ${emmc_ack} 1 0
FB: ucmd if test "${emmc_skip_fb}" != "yes"; then run emmc_cmd; fi
FB: ucmd setenv emmc_cmd mmc bootbus ${emmc_dev} 2 0 1;
FB: ucmd if test "${emmc_skip_fb}" != "yes"; then run emmc_cmd; fi

# Load kernel and boot from initramfs
FB: ucmd setenv fastboot_buffer ${fit_addr}
FB: download -f fitImage-uuu.signed
FB: acmd bootm ${fit_addr}

# Wait for emmc and save mmc device path
FBK: ucmd while [ ! -e /dev/mmcblk*boot0 ]; do sleep 1; echo "wait for /dev/mmcblk*boot* appear"; done;
FBK: ucmd dev=`ls /dev/mmcblk*boot*`; dev=($dev); dev=${dev[0]}; dev=${dev#/dev/mmcblk}; dev=${dev%boot*}; echo $dev > /tmp/mmcdev;

# load and write partition table
FBK: ucp partitions t:/tmp
FBK: ucmd mmc=`cat /tmp/mmcdev`; dd if=/dev/zero of=/dev/mmcblk${mmc} bs=1M count=10
FBK: ucmd mmc=`cat /tmp/mmcdev`; cat /tmp/partitions | sfdisk --force /dev/mmcblk${mmc}
FBK: ucmd sync

# load bootloader container (flash.bin.signed) and flash it to both hardware boot partitions
FBK: ucp  flash.bin.signed t:/tmp
FBK: ucmd mmc=`cat /tmp/mmcdev`; echo 0 > /sys/block/mmcblk${mmc}boot0/force_ro
FBK: ucmd mmc=`cat /tmp/mmcdev`; echo 0 > /sys/block/mmcblk${mmc}boot1/force_ro
FBK: ucmd mmc=`cat /tmp/mmcdev`; dd if=/tmp/flash.bin.signed of=/dev/mmcblk${mmc}boot0
FBK: ucmd mmc=`cat /tmp/mmcdev`; dd if=/tmp/flash.bin.signed of=/dev/mmcblk${mmc}boot1
FBK: ucmd sync
FBK: ucmd mmc=`cat /tmp/mmcdev`; echo 1 > /sys/block/mmcblk${mmc}boot0/force_ro
FBK: ucmd mmc=`cat /tmp/mmcdev`; echo 1 > /sys/block/mmcblk${mmc}boot1/force_ro

# flash fitImage.signed to both linuxboot partitions
FBK: ucmd mmc=`cat /tmp/mmcdev`; while [ ! -e /dev/mmcblk${mmc}p2 ]; do sleep 1; done
FBK: ucmd mmc=`cat /tmp/mmcdev`; mkfs.vfat /dev/mmcblk${mmc}p2
FBK: ucmd mkdir -p /mnt/fat
FBK: ucmd mmc=`cat /tmp/mmcdev`; mount -t vfat /dev/mmcblk${mmc}p2 /mnt/fat
FBK: ucp  fitImage.signed t:/mnt/fat/fitImage.signed
FBK: ucmd umount /mnt/fat

FBK: ucmd mmc=`cat /tmp/mmcdev`; mkfs.vfat /dev/mmcblk${mmc}p3
FBK: ucmd mmc=`cat /tmp/mmcdev`; mount -t vfat /dev/mmcblk${mmc}p3 /mnt/fat
FBK: ucp  fitImage.signed t:/mnt/fat/fitImage.signed
FBK: ucmd umount /mnt/fat
FBK: ucmd sync

# create FAT on rescue partition
FBK: ucmd mmc=`cat /tmp/mmcdev`; mkfs.vfat /dev/mmcblk${mmc}p4

# copy hashsum and filesizes file to board
FBK: ucp hashsums t:/tmp

# extract LVM sizes for rootfs and hash devices
FBK: ucmd sh -c '. /tmp/hashsums; echo "((($SIZE_ROOTFS/(4*1024*1024)) + (($SIZE_ROOTFS % (4*1024*1024)) > 0)) * (4*1024*1024))" | bc' > /tmp/size_rootfs
FBK: ucmd sh -c '. /tmp/hashsums; echo "((($SIZE_ROOTFSVERITY/(4*1024*1024)) + (($SIZE_ROOTFSVERITY % (4*1024*1024)) > 0)) * (4*1024*1024))" | bc' > /tmp/size_rootfsverity

# Create LVM
FBK: ucmd mmc=`cat /tmp/mmcdev`; pvcreate -ff -y /dev/mmcblk${mmc}p5
FBK: ucmd mmc=`cat /tmp/mmcdev`; vgcreate matrixlvm /dev/mmcblk${mmc}p5
# start udev daemon so lvm can synchronize devices
FBK: ucmd /etc/init.d/udev start
FBK: ucmd lvcreate -y -n rootfs_a -L "$(cat /tmp/size_rootfs)"B matrixlvm
FBK: ucmd lvcreate -y -n rootfs_a_hash -L "$(cat /tmp/size_rootfsverity)"B matrixlvm
FBK: ucmd lvcreate -y -n rootfs_b -L "$(cat /tmp/size_rootfs)"B matrixlvm
FBK: ucmd lvcreate -y -n rootfs_b_hash -L "$(cat /tmp/size_rootfsverity)"B matrixlvm
FBK: ucmd lvcreate -y -n userdata_a -L 256MB matrixlvm
FBK: ucmd lvcreate -y -n userdata_b -L 256MB matrixlvm
FBK: ucmd lvcreate -y -n datastore -L 512MB matrixlvm
FBK: ucmd lvcreate -y -n datastore2 -L 128MB matrixlvm # datastore2 is not encrypted
FBK: ucmd lvcreate -y -n keystore -L 128MB matrixlvm
FBK: ucmd vgchange -a y
FBK: ucmd vgmknodes

# Create fat data partition (keystore)
FBK: ucmd mkfs.ext4 /dev/mapper/matrixlvm-keystore
FBK: ucmd mount /dev/mapper/matrixlvm-keystore /mnt/keystore

# Generate, add and export a random trusted 32 byte kernel master key (blob)
FBK: ucmd key_id=$(keyctl add trusted kmk "new 32" @us); keyctl pipe $key_id > /mnt/keystore/kmk.blob

# Setup encrypted volumes
FBK: ucmd dmsetup -v create decrypted-matrixlvm-rootfs_a   --table "0 $(blockdev --getsz /dev/mapper/matrixlvm-rootfs_a)   crypt aes-cbc-plain :32:trusted:kmk 0 /dev/mapper/matrixlvm-rootfs_a   0 1 sector_size:4096"
FBK: ucmd dmsetup -v create decrypted-matrixlvm-rootfs_b   --table "0 $(blockdev --getsz /dev/mapper/matrixlvm-rootfs_b)   crypt aes-cbc-plain :32:trusted:kmk 0 /dev/mapper/matrixlvm-rootfs_a   0 1 sector_size:4096"
FBK: ucmd dmsetup -v create decrypted-matrixlvm-userdata_a --table "0 $(blockdev --getsz /dev/mapper/matrixlvm-userdata_a) crypt aes-cbc-plain :32:trusted:kmk 0 /dev/mapper/matrixlvm-userdata_a 0 1 sector_size:4096"
FBK: ucmd dmsetup -v create decrypted-matrixlvm-userdata_b --table "0 $(blockdev --getsz /dev/mapper/matrixlvm-userdata_b) crypt aes-cbc-plain :32:trusted:kmk 0 /dev/mapper/matrixlvm-userdata_b 0 1 sector_size:4096"
FBK: ucmd dmsetup -v create decrypted-matrixlvm-datastore  --table "0 $(blockdev --getsz /dev/mapper/matrixlvm-datastore)  crypt aes-cbc-plain :32:trusted:kmk 0 /dev/mapper/matrixlvm-datastore  0 1 sector_size:4096"
FBK: ucmd vgmknodes

# Flash rootfs to both rootfs partitions
FBK: acmd zcat | dd of=/dev/mapper/decrypted-matrixlvm-rootfs_a
FBK: ucp rootfs.ext4.gz t:-
FBK: acmd zcat | dd of=/dev/mapper/decrypted-matrixlvm-rootfs_b
FBK: ucp rootfs.ext4.gz t:-
FBK: sync
FBK: ucmd sync

FBK: acmd cat | dd of=/dev/mapper/matrixlvm-rootfs_a_hash
FBK: ucp rootfs.ext4.hashdevice t:-
FBK: sync
FBK: ucmd sync

FBK: acmd cat | dd of=/dev/mapper/matrixlvm-rootfs_b_hash
FBK: ucp rootfs.ext4.hashdevice t:-
FBK: sync
FBK: ucmd sync

# Create ext4 partition for userdata A/B
FBK: ucmd mkfs.ext4 /dev/mapper/decrypted-matrixlvm-userdata_a
FBK: ucmd mkdir -p /mnt/iris
FBK: ucmd mount -t ext4 /dev/mapper/decrypted-matrixlvm-userdata_a /mnt/iris
FBK: ucmd mkdir -p /mnt/iris/counter
FBK: ucmd mkdir -p /mnt/iris/irma6webserver
FBK: ucmd mkdir -p /mnt/iris/dropbear
FBK: ucmd mkdir -p /mnt/iris/swupdate
FBK: ucp swupdate_snakeoil_encryption.key t:/mnt/iris/swupdate/encryption.key
FBK: ucmd chmod 0400 /mnt/iris/swupdate/encryption.key
FBK: ucmd mkdir -p /mnt/iris/identity
FBK: ucp sensor_identity_snakeoil.key t:/mnt/iris/identity/sensor.key
FBK: ucp sensor_identity_snakeoil.crt t:/mnt/iris/identity/sensor.crt
FBK: ucmd chmod 0440 -R /mnt/iris/identity/
FBK: ucmd ln -sr /mnt/iris/identity /mnt/iris/webtls
FBK: ucmd ln -sr /mnt/iris/identity /mnt/iris/nts
FBK: ucmd ln -sr /mnt/iris/identity /mnt/iris/eaptls
FBK: ucmd mkdir -p /mnt/iris/nginx/sites-enabled

# Default to HTTP
FBK: ucmd ln -s /etc/nginx/sites-available/reverse_proxy_http.conf /mnt/iris/nginx/sites-enabled/default_server

# Copy userdata A to B
FBK: ucmd mkfs.ext4 /dev/mapper/decrypted-matrixlvm-userdata_b
FBK: ucmd mkdir -p /tmp/userdata_b
FBK: ucmd mount -t ext4 /dev/mapper/decrypted-matrixlvm-userdata_b /tmp/userdata_b
FBK: ucmd cp -r /mnt/iris/* /tmp/userdata_b

# datastore
FBK: ucmd mkfs.ext4 /dev/mapper/decrypted-matrixlvm-datastore
FBK: ucmd mkfs.ext4 /dev/mapper/matrixlvm-datastore2

# Clean up
FBK: ucmd sync
FBK: ucmd umount /mnt/iris
FBK: ucmd umount /tmp/userdata_b
FBK: ucmd rm -rf /tmp/userdata_b
FBK: ucmd dmsetup remove decrypted-matrixlvm-userdata_a
FBK: ucmd dmsetup remove decrypted-matrixlvm-userdata_b
FBK: ucmd dmsetup remove decrypted-matrixlvm-datastore

FBK: ucp rootfs.ext4.roothash t:/mnt/keystore/rootfs_a_roothash
FBK: ucp rootfs.ext4.roothash t:/mnt/keystore/rootfs_b_roothash
FBK: ucp rootfs.ext4.roothash.signature t:/mnt/keystore/rootfs_a_roothash.signature
FBK: ucp rootfs.ext4.roothash.signature t:/mnt/keystore/rootfs_b_roothash.signature

FBK: ucmd umount /mnt/keystore
FBK: ucmd sync

# Hashsum check
FBK: ucp verification.sh t:/tmp
FBK: ucmd /bin/sh /tmp/verification.sh
# wait for end of operation as there are u/mount operations in the script
FBK: ucmd sync

FBK: DONE
