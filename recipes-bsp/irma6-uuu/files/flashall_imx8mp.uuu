uuu_version 1.4.165

# Boot flash.bin.signed
SDPS: boot -f flash.bin.signed

# Configure boot mode of emmc (boot0 active, x8 buswidth)
FB: ucmd if env exists emmc_ack; then ; else setenv emmc_ack 0; fi;
FB: ucmd setenv emmc_cmd mmc partconf ${emmc_dev} ${emmc_ack} 1 0
FB: ucmd if test "${emmc_skip_fb}" != "yes"; then run emmc_cmd; fi
FB: ucmd setenv emmc_cmd mmc bootbus ${emmc_dev} 2 2 1;
FB: ucmd if test "${emmc_skip_fb}" != "yes"; then run emmc_cmd; fi

# Load kernel and boot from initramfs
FB: ucmd setenv fastboot_buffer ${fit_addr}
FB: download -f fitImage-uuu.signed
FB: acmd bootm ${fit_addr}

# Wait for emmc and save mmc device path
FBK: ucmd while [ ! -e /dev/mmcblk*boot0 ]; do sleep 1; echo "wait for /dev/mmcblk*boot* appear"; done;
FBK: ucmd dev=`ls /dev/mmcblk*boot*`; dev=($dev); dev=${dev[0]}; dev=${dev#/dev/mmcblk}; dev=${dev%boot*}; echo $dev > /tmp/mmcdev;

# load and write partition table
FBK: ucp partitions t:/tmp
FBK: ucmd mmc=`cat /tmp/mmcdev`; dd if=/dev/zero of=/dev/mmcblk${mmc} bs=1M count=10
FBK: ucmd mmc=`cat /tmp/mmcdev`; cat /tmp/partitions | sfdisk --force /dev/mmcblk${mmc}
FBK: ucmd sync

# load bootloader container (flash.bin.signed) and flash it to both hardware boot partitions
FBK: ucp  flash.bin.signed t:/tmp
FBK: ucmd mmc=`cat /tmp/mmcdev`; echo 0 > /sys/block/mmcblk${mmc}boot0/force_ro
FBK: ucmd mmc=`cat /tmp/mmcdev`; echo 0 > /sys/block/mmcblk${mmc}boot1/force_ro
FBK: ucmd mmc=`cat /tmp/mmcdev`; dd if=/tmp/flash.bin.signed of=/dev/mmcblk${mmc}boot0
FBK: ucmd mmc=`cat /tmp/mmcdev`; dd if=/tmp/flash.bin.signed of=/dev/mmcblk${mmc}boot1
FBK: ucmd sync
FBK: ucmd mmc=`cat /tmp/mmcdev`; echo 1 > /sys/block/mmcblk${mmc}boot0/force_ro
FBK: ucmd mmc=`cat /tmp/mmcdev`; echo 1 > /sys/block/mmcblk${mmc}boot1/force_ro

# flash fitimage to both linuxboot partitions
FBK: ucmd mmc=`cat /tmp/mmcdev`; while [ ! -e /dev/mmcblk${mmc}p2 ]; do sleep 1; done
FBK: ucmd mmc=`cat /tmp/mmcdev`; mkfs.vfat /dev/mmcblk${mmc}p2
FBK: ucmd mkdir -p /mnt/fat
FBK: ucmd mmc=`cat /tmp/mmcdev`; mount -t vfat /dev/mmcblk${mmc}p2 /mnt/fat
FBK: ucp  fitImage.signed t:/mnt/fat/fitImage.signed
FBK: ucmd umount /mnt/fat

FBK: ucmd mmc=`cat /tmp/mmcdev`; mkfs.vfat /dev/mmcblk${mmc}p3
FBK: ucmd mmc=`cat /tmp/mmcdev`; mount -t vfat /dev/mmcblk${mmc}p3 /mnt/fat
FBK: ucp  fitImage.signed t:/mnt/fat/fitImage.signed
FBK: ucmd umount /mnt/fat
FBK: ucmd sync

# create FAT on rescue partition
FBK: ucmd mmc=`cat /tmp/mmcdev`; mkfs.vfat /dev/mmcblk${mmc}p4

# Create LVM
FBK: ucmd mmc=`cat /tmp/mmcdev`; pvcreate -ff -y /dev/mmcblk${mmc}p5
FBK: ucmd mmc=`cat /tmp/mmcdev`; vgcreate irma6lvm /dev/mmcblk${mmc}p5
# Use "--zero n" to skip the check if the first 4kB are zeroed. TODO: Zeroing should be done!
FBK: ucmd lvcreate --zero n -n rootfs_a -L 512MB irma6lvm
FBK: ucmd lvcreate --zero n -n rootfs_a_hash -L 32MB irma6lvm
FBK: ucmd lvcreate --zero n -n rootfs_b -L 512MB irma6lvm
FBK: ucmd lvcreate --zero n -n rootfs_b_hash -L 32MB irma6lvm
FBK: ucmd lvcreate --zero n -n userdata -L 512MB irma6lvm
FBK: ucmd lvcreate --zero n -n staticdata -L 128MB irma6lvm
FBK: ucmd lvcreate --zero n -n staticdata_hash -L 8MB irma6lvm
FBK: ucmd lvcreate --zero n -n keystore -L 128MB irma6lvm
FBK: ucmd vgchange -a y
FBK: ucmd vgmknodes

# Flash rootfs to both rootfs partitions
FBK: acmd zcat | dd of=/dev/mapper/irma6lvm-rootfs_a
FBK: ucp rootfs.ext4.gz t:-
FBK: ucmd sync

FBK: acmd zcat | dd of=/dev/mapper/irma6lvm-rootfs_b
FBK: ucp rootfs.ext4.gz t:-
FBK: ucmd sync

# Create ext4 partition for userdata
FBK: ucmd mkfs.ext4 /dev/mapper/irma6lvm-userdata
FBK: ucmd mkdir -p /mnt/iris
FBK: ucmd mount -t ext4 /dev/mapper/irma6lvm-userdata /mnt/iris
FBK: ucmd mkdir -p /mnt/iris/counter
FBK: ucmd umount /mnt/iris
FBK: ucmd sync

# Create fat data partition (keystore)
FBK: ucmd mkfs.vfat /dev/mapper/irma6lvm-keystore
FBK: ucmd mkdir -p /mnt/keystore
FBK: ucmd mount -t vfat /dev/mapper/irma6lvm-keystore /mnt/keystore

# !! The root hashes for the dm-verity volumes are generated here !!
# TODO: Unsafe! Store roothash in a secure manner!
FBK: ucmd veritysetup format /dev/mapper/irma6lvm-rootfs_a /dev/mapper/irma6lvm-rootfs_a_hash | grep "Root hash:" | grep -Eo "[0-9a-f]+$" > /mnt/keystore/rootfs_a_roothash
FBK: ucmd veritysetup format /dev/mapper/irma6lvm-rootfs_b /dev/mapper/irma6lvm-rootfs_b_hash | grep "Root hash:" | grep -Eo "[0-9a-f]+$" > /mnt/keystore/rootfs_b_roothash

FBK: ucmd umount /mnt/keystore
FBK: ucmd sync

# Hashsum check
FBK: ucp verification.sh t:/tmp
FBK: ucp hashsums t:/tmp
FBK: ucmd /bin/sh /tmp/verification.sh
# wait for end of operation as there are u/mount operations in the script
FBK: ucmd sync

FBK: DONE
