From bd5b7a73eb267c70b2319e6797fcf5104c5a0f17 Mon Sep 17 00:00:00 2001
From: Stefano Babic <stefano.babic@swupdate.org>
Date: Thu, 3 Jul 2025 14:46:27 +0200
Subject: [PATCH 10/11] FEATURE: introduce update type

It is often useful to differentiate on update of different types, for
example the update for the OS can hgave a different setup and a
different acceptance of versions than an application update. This
introduces "update_type" as attribute in sw-description, and a set of
parameters can be added to swupdate.cfg. They are at the moment:
	- preupdatecmd
	- postupdatecmd
	- min and maxversion
	- no-reinstalling version

It is then possible to set a no-downgrading just for a specific type, or
for all types but with different versions.

Signed-off-by: Stefano Babic <stefano.babic@swupdate.org>
Tested-by: Ian Dannapel <iansdannapel@gmail.com>

Upstream-Status: Submitted [https://groups.google.com/g/swupdate/c/7f3Q2PAgQPY]
---
 core/network_thread.c   |  5 +--
 core/parser.c           | 30 +++++++++++++----
 core/stream_interface.c | 32 ++++++++++++------
 core/swupdate.c         | 75 +++++++++++++++++++++++++++++++++++++++--
 include/network_ipc.h   |  5 +++
 include/swupdate.h      |  3 ++
 include/util.h          |  3 +-
 ipc/network_ipc-if.c    | 19 ++++++++++-
 parser/parser.c         |  7 ++++
 9 files changed, 156 insertions(+), 23 deletions(-)

diff --git a/core/network_thread.c b/core/network_thread.c
index b70fa12c..a00c0db6 100644
--- a/core/network_thread.c
+++ b/core/network_thread.c
@@ -580,9 +580,10 @@ void *network_thread (void *data)
 				break;
 			case SET_VERSIONS_RANGE:
 				msg.type = ACK;
-				set_version_range(msg.data.versions.minimum_version,
+				if (set_version_range(msg.data.versions.update_type,
+						  msg.data.versions.minimum_version,
 						  msg.data.versions.maximum_version,
-						  msg.data.versions.current_version);
+						  msg.data.versions.current_version)) msg.type = NACK;
 				break;
 			case GET_HW_REVISION:
 				cfg = get_swupdate_cfg();
diff --git a/core/parser.c b/core/parser.c
index 9e26b413..f0dae19e 100644
--- a/core/parser.c
+++ b/core/parser.c
@@ -130,7 +130,7 @@ static int check_handler_list(struct imglist *list,
 	return 0;
 }
 
-static struct swupdate_type_cfg *swupdate_find_update_type(struct swupdate_type_list *list, const char *name)
+struct swupdate_type_cfg *swupdate_find_update_type(struct swupdate_type_list *list, const char *name)
 {
 	struct swupdate_type_cfg *type_cfg = NULL;
 
@@ -164,16 +164,10 @@ int parse(struct swupdate_cfg *sw, const char *descfile)
 
 #endif
 	char *errors[ARRAY_SIZE(parsers)] = {0};
-	struct swupdate_type_cfg *update_type = swupdate_find_update_type(&sw->swupdate_types, "default");
 
-	if (!update_type) {
-		ERROR("Update Type Default is always present, something wrong here !");
-		return -EFAULT;
-	}
 	for (unsigned int i = 0; i < ARRAY_SIZE(parsers); i++) {
 		current = parsers[i];
 
-		sw->update_type = update_type;
 		ret = current(sw, descfile, &errors[i]);
 
 		if (ret == 0)
@@ -234,6 +228,28 @@ int parse(struct swupdate_cfg *sw, const char *descfile)
 #endif
 #endif
 
+	/*
+	 * Check if a an Update Type is set and
+	 * load the configuration
+	 */
+	struct swupdate_type_cfg *update_type;
+	if (!strnlen(sw->update_type_name, sizeof(sw->update_type_name) - 1)) {
+		if (sw->update_type_required) {
+			ERROR("Update Type is mandatory but it was not set");
+			return -EINVAL;
+		} else
+			strlcpy(sw->update_type_name,
+				"default",
+				sizeof(sw->update_type_name));
+	}
+	update_type = swupdate_find_update_type(&sw->swupdate_types, sw->update_type_name);
+	if (!update_type) {
+		ERROR("Requested Update of Type %s but it is not configured", sw->update_type_name);
+		return -EINVAL;
+	}
+
+	sw->update_type = update_type;
+
 	/*
 	 * If downgrading is not allowed, convert
 	 * versions in numbers to be compared and check to get a
diff --git a/core/stream_interface.c b/core/stream_interface.c
index 3a504427..fe7a952d 100644
--- a/core/stream_interface.c
+++ b/core/stream_interface.c
@@ -855,22 +855,34 @@ sourcetype get_install_source(void)
 	return inst.req.source;
 }
 
-void set_version_range(const char *minversion,
+int set_version_range(const char *update_type, const char *minversion,
 		const char *maxversion, const char *current)
 {
+	struct swupdate_type_cfg *typecfg;
+	typecfg = swupdate_find_update_type(&inst.software->swupdate_types,
+					    update_type && strnlen(update_type, SWUPDATE_GENERAL_STRING_SIZE) ?
+					    update_type : "default");
+
+	if (!typecfg) {
+		ERROR("Configuration setup for Update Type not found");
+		return -EINVAL;
+	}
+
 	if (minversion && strnlen(minversion, SWUPDATE_GENERAL_STRING_SIZE)) {
-		strlcpy(inst.software->update_type->minimum_version, minversion,
-			sizeof(inst.software->update_type->minimum_version));
-		inst.software->update_type->no_downgrading = true;
+		strlcpy(typecfg->minimum_version, minversion,
+			sizeof(typecfg->minimum_version));
+		typecfg->no_downgrading = true;
 	}
 	if (maxversion && strnlen(maxversion, SWUPDATE_GENERAL_STRING_SIZE)) {
-		strlcpy(inst.software->update_type->maximum_version, maxversion,
-			sizeof(inst.software->update_type->maximum_version));
-		inst.software->update_type->check_max_version = true;
+		strlcpy(typecfg->maximum_version, maxversion,
+			sizeof(typecfg->maximum_version));
+		typecfg->check_max_version = true;
 	}
 	if (current && strnlen(current, SWUPDATE_GENERAL_STRING_SIZE)) {
-		strlcpy(inst.software->update_type->current_version, current,
-			sizeof(inst.software->update_type->current_version));
-		inst.software->update_type->no_reinstalling = true;
+		strlcpy(typecfg->current_version, current,
+			sizeof(typecfg->current_version));
+		typecfg->no_reinstalling = true;
 	}
+
+	return 0;
 }
diff --git a/core/swupdate.c b/core/swupdate.c
index e4f29ca5..c844cb06 100644
--- a/core/swupdate.c
+++ b/core/swupdate.c
@@ -266,6 +266,11 @@ static int parse_image_selector(const char *selector, struct swupdate_cfg *sw)
 static void swupdate_init(struct swupdate_cfg *sw)
 {
 	struct swupdate_type_cfg *update_type = calloc (1, sizeof(*update_type));
+	if (!update_type) {
+		/* this should never happen */
+		fprintf(stderr, "OOM at startup, exiting...\n");
+		exit(EXIT_FAILURE);
+	}
 	/* Initialize internal tree to store configuration */
 	memset(sw, 0, sizeof(*sw));
 	LIST_INIT(&sw->images);
@@ -301,7 +306,7 @@ static int parse_cert_purpose(const char *text)
 	exit(EXIT_FAILURE);
 }
 
-static void read_type_settings(void *elem, struct swupdate_type_cfg *typecfg)
+static void read_updatetype_settings(void *elem, struct swupdate_type_cfg *typecfg)
 {
 	GET_FIELD_STRING(LIBCFG_PARSER, elem,
 				"postupdatecmd", typecfg->postupdatecmd);
@@ -357,6 +362,7 @@ static int read_globals_settings(void *elem, void *data)
 	GET_FIELD_BOOL(LIBCFG_PARSER, elem, "verbose", &sw->verbose);
 	GET_FIELD_INT(LIBCFG_PARSER, elem, "loglevel", &sw->loglevel);
 	GET_FIELD_BOOL(LIBCFG_PARSER, elem, "syslog", &sw->syslog_enabled);
+	GET_FIELD_BOOL(LIBCFG_PARSER, elem, "update-type-required", &sw->update_type_required);
 	tmp[0] = '\0';
 	GET_FIELD_STRING(LIBCFG_PARSER, elem,
 				"fwenv-config-location", tmp);
@@ -385,7 +391,7 @@ static int read_globals_settings(void *elem, void *data)
 				&sw->swdesc_max_size);
 
 
-	read_type_settings(elem, sw->update_type);
+	read_updatetype_settings(elem, sw->update_type);
 
 	return 0;
 }
@@ -455,6 +461,61 @@ static int read_processes_settings(void *settings, void *data)
 	return 0;
 }
 
+static int read_type_settings(void *settings, void *data)
+{
+	struct swupdate_cfg *sw = (struct swupdate_cfg *)data;
+	void *elem;
+	int count, i;
+	count = get_array_length(LIBCFG_PARSER, settings);
+	struct swupdate_type_cfg *current = LIST_FIRST(&sw->swupdate_types);
+
+	for(i = 0; i < count; ++i) {
+		elem = get_elem_from_idx(LIBCFG_PARSER, settings, i);
+
+		if (!elem)
+			continue;
+
+		if(!(exist_field_string(LIBCFG_PARSER, elem, "name")))
+			continue;
+		struct swupdate_type_cfg *update_type = calloc (1, sizeof(*update_type));
+		if (!update_type) {
+			ERROR("OOM at startup");
+			return -ENOMEM;
+		}
+
+		GET_FIELD_STRING(LIBCFG_PARSER, elem, "name", update_type->type_name);
+		if (swupdate_find_update_type(&sw->swupdate_types, update_type->type_name)) {
+			WARN("Duplicated Update Type: %s, ignoring...", update_type->type_name);
+			free(update_type);
+			continue;
+		}
+		read_updatetype_settings(elem, update_type);
+		LIST_INSERT_AFTER(current, update_type, next);
+		current = update_type;
+	}
+
+	return 0;
+}
+
+static void print_registered_updatetypes(struct swupdate_cfg *sw)
+{
+	struct swupdate_type_cfg *update_type;
+	INFO("Registered : Update Types");
+	LIST_FOREACH(update_type, &sw->swupdate_types, next) {
+		INFO("\tName:\t%s", update_type->type_name);
+		if (strlen(update_type->preupdatecmd))
+			INFO("\t\tpreupdatecmd:\t%s", update_type->preupdatecmd);
+		if (strlen(update_type->postupdatecmd))
+			INFO("\t\tpostupdatecmd:\t%s", update_type->postupdatecmd);
+		if (strlen(update_type->minimum_version))
+			INFO("\t\tMin Version:\t%s", update_type->minimum_version);
+		if (strlen(update_type->maximum_version))
+			INFO("\t\tMax Version:\t%s", update_type->maximum_version);
+		if (strlen(update_type->current_version))
+			INFO("\t\tNo-Downgrading:\t%s", update_type->current_version);
+	}
+}
+
 static void sigterm_handler(int __attribute__ ((__unused__)) signum)
 {
 	pthread_cancel(network_daemon);
@@ -614,6 +675,14 @@ int main(int argc, char **argv)
 			exit(EXIT_FAILURE);
 		}
 
+		/*
+		 * Read configuration for different update types
+		 */
+		ret = read_module_settings(&handle, "update-types", read_type_settings, &swcfg);
+		if (ret && swcfg.update_type_required) {
+			WARN("Type is requested, but no type is configured, just default");
+		}
+
 		loglevel = swcfg.verbose ? LASTLOGLEVEL : swcfg.loglevel;
 
 		/*
@@ -877,6 +946,8 @@ int main(int argc, char **argv)
 		INFO("Using bootloader interface: %s", get_bootloader());
 	}
 
+	print_registered_updatetypes(&swcfg);
+
 	/*
 	 * Install a child handler to check if a subprocess
 	 * dies
diff --git a/include/network_ipc.h b/include/network_ipc.h
index 4d41b7b4..8eb64cdf 100644
--- a/include/network_ipc.h
+++ b/include/network_ipc.h
@@ -116,6 +116,7 @@ typedef union {
 		char minimum_version[256];
 		char maximum_version[256];
 		char current_version[256];
+		char update_type[256];
 	} versions;
 	struct {
 		char boardname[256];
@@ -159,6 +160,10 @@ int swupdate_set_aes(char *key, char *ivt);
 int swupdate_set_version_range(const char *minversion,
 				const char *maxversion,
 				const char *currentversion);
+int swupdate_set_version_range_type(const char *updatetype,
+				const char *minversion,
+				const char *maxversion,
+				const char *currentversion);
 #ifdef __cplusplus
 }   // extern "C"
 #endif
diff --git a/include/swupdate.h b/include/swupdate.h
index 99aaf5c9..b7f796e0 100644
--- a/include/swupdate.h
+++ b/include/swupdate.h
@@ -65,9 +65,11 @@ struct swupdate_parms {
 struct swupdate_cfg {
 	char name[SWUPDATE_GENERAL_STRING_SIZE];
 	char description[SWUPDATE_UPDATE_DESCRIPTION_STRING_SIZE];
+	char update_type_name[SWUPDATE_GENERAL_STRING_SIZE];
 	char version[SWUPDATE_GENERAL_STRING_SIZE];
 	bool bootloader_transaction_marker;
 	bool bootloader_state_marker;
+	bool update_type_required;
 	char output[SWUPDATE_GENERAL_STRING_SIZE];
 	char output_swversions[SWUPDATE_GENERAL_STRING_SIZE];
 	char publickeyfname[SWUPDATE_GENERAL_STRING_SIZE];
@@ -104,3 +106,4 @@ struct swupdate_cfg {
 
 struct swupdate_cfg *get_swupdate_cfg(void);
 void free_image(struct img_type *img);
+struct swupdate_type_cfg *swupdate_find_update_type(struct swupdate_type_list *list, const char *name);
diff --git a/include/util.h b/include/util.h
index f49fe8cc..99703da5 100644
--- a/include/util.h
+++ b/include/util.h
@@ -303,7 +303,8 @@ char *get_root_device(void);
 char **parse_linux_cmdline(void);
 
 /* Setting global information */
-void set_version_range(const char *minversion,
+int set_version_range(const char *updatetype,
+			const char *minversion,
 			const char *maxversion,
 			const char *current);
 
diff --git a/ipc/network_ipc-if.c b/ipc/network_ipc-if.c
index 7740d1dc..cd0d4e5d 100644
--- a/ipc/network_ipc-if.c
+++ b/ipc/network_ipc-if.c
@@ -357,7 +357,8 @@ int swupdate_set_aes(char *key, char *ivt)
  * Set via IPC the range of accepted versions
  * Versions are string and they can use semver
  */
-int swupdate_set_version_range(const char *minversion,
+int swupdate_set_version_range_type(const char *updatetype,
+				const char *minversion,
 				const char *maxversion,
 				const char *currentversion)
 {
@@ -385,9 +386,25 @@ int swupdate_set_version_range(const char *minversion,
 			sizeof(msg.data.versions.maximum_version) - 1);
 	}
 
+	if (updatetype) {
+		strncpy(msg.data.versions.update_type,
+			updatetype,
+			sizeof(msg.data.versions.update_type) - 1);
+	}
 	return ipc_send_cmd(&msg);
 }
 
+int swupdate_set_version_range(const char *minversion,
+				const char *maxversion,
+				const char *currentversion)
+
+{
+	return swupdate_set_version_range_type(minversion,
+						      maxversion,
+						      currentversion,
+						      NULL);
+}
+
 void swupdate_prepare_req(struct swupdate_request *req) {
 	if (!req)
 		return;
diff --git a/parser/parser.c b/parser/parser.c
index a8f4a691..f5b53d67 100644
--- a/parser/parser.c
+++ b/parser/parser.c
@@ -188,6 +188,13 @@ static bool get_common_fields(parsertype p, void *cfg, struct swupdate_cfg *swcf
 		TRACE("Description %s", swcfg->description);
 	}
 
+	swcfg->update_type_name[0] = '\0';
+
+	if((setting = find_node(p, cfg, "update-type", swcfg)) != NULL) {
+		GET_FIELD_STRING(p, setting, NULL, swcfg->update_type_name);
+		TRACE("Update Type set to %s", swcfg->update_type_name);
+	}
+
 	if(swcfg->no_state_marker) {
 		swcfg->bootloader_state_marker = false;
 	} else {
-- 
2.44.3

