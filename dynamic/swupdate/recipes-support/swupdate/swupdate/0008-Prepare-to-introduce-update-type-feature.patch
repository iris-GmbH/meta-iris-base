From d1e573c293971500076884c009d6d17928337371 Mon Sep 17 00:00:00 2001
From: Stefano Babic <stefano.babic@swupdate.org>
Date: Thu, 3 Jul 2025 14:46:25 +0200
Subject: [PATCH 08/11] Prepare to introduce "update-type" feature

Some configurations can be grouped for update of a specific type, for
example it is plausible to have "OS update" and "application update"
(and many other) and each of them can have its set of settings.

Create a structure to group update-type configuration settings and move
them away from the main structure.

This is in preparation to introduce the "update-type" feature

Signed-off-by: Stefano Babic <stefano.babic@swupdate.org>

Upstream-Status: Submitted [https://groups.google.com/g/swupdate/c/7f3Q2PAgQPY]
---
 core/installer.c        |  4 +--
 core/parser.c           | 37 ++++++++++++++++-----
 core/stream_interface.c | 18 +++++-----
 core/swupdate.c         | 73 +++++++++++++++++++++++++----------------
 include/swupdate.h      | 36 +++++++++++++-------
 5 files changed, 108 insertions(+), 60 deletions(-)

diff --git a/core/installer.c b/core/installer.c
index 88d57673..da063938 100644
--- a/core/installer.c
+++ b/core/installer.c
@@ -591,7 +591,7 @@ int preupdatecmd(struct swupdate_cfg *swcfg)
 			DEBUG("Dry run, skipping Pre-update command");
 		} else {
 			DEBUG("Running Pre-update command");
-			return run_system_cmd(swcfg->preupdatecmd);
+			return run_system_cmd(swcfg->update_type->preupdatecmd);
 		}
 	}
 
@@ -607,7 +607,7 @@ int postupdate(struct swupdate_cfg *swcfg, const char *info)
 			DEBUG("Dry run, skipping Post-update command");
 		} else {
 			DEBUG("Running Post-update command");
-			return run_system_cmd(swcfg->postupdatecmd);
+			return run_system_cmd(swcfg->update_type->postupdatecmd);
 		}
 
 	}
diff --git a/core/parser.c b/core/parser.c
index 6e8389c5..9e26b413 100644
--- a/core/parser.c
+++ b/core/parser.c
@@ -130,6 +130,18 @@ static int check_handler_list(struct imglist *list,
 	return 0;
 }
 
+static struct swupdate_type_cfg *swupdate_find_update_type(struct swupdate_type_list *list, const char *name)
+{
+	struct swupdate_type_cfg *type_cfg = NULL;
+
+	LIST_FOREACH(type_cfg, list, next) {
+		if (!strcmp(type_cfg->type_name, name)) {
+			return type_cfg;
+		}
+	}
+	return NULL;
+}
+
 int parse(struct swupdate_cfg *sw, const char *descfile)
 {
 	int ret = -1;
@@ -152,9 +164,16 @@ int parse(struct swupdate_cfg *sw, const char *descfile)
 
 #endif
 	char *errors[ARRAY_SIZE(parsers)] = {0};
+	struct swupdate_type_cfg *update_type = swupdate_find_update_type(&sw->swupdate_types, "default");
+
+	if (!update_type) {
+		ERROR("Update Type Default is always present, something wrong here !");
+		return -EFAULT;
+	}
 	for (unsigned int i = 0; i < ARRAY_SIZE(parsers); i++) {
 		current = parsers[i];
 
+		sw->update_type = update_type;
 		ret = current(sw, descfile, &errors[i]);
 
 		if (ret == 0)
@@ -220,10 +239,10 @@ int parse(struct swupdate_cfg *sw, const char *descfile)
 	 * versions in numbers to be compared and check to get a
 	 * newer version
 	 */
-	if (sw->no_downgrading) {
-		if (compare_versions(sw->version, sw->minimum_version) < 0) {
+	if (sw->update_type->no_downgrading) {
+		if (compare_versions(sw->version, sw->update_type->minimum_version) < 0) {
 			ERROR("No downgrading allowed: new version %s < installed %s",
-				sw->version, sw->minimum_version);
+				sw->version, sw->update_type->minimum_version);
 			return -EPERM;
 		}
 	}
@@ -233,10 +252,10 @@ int parse(struct swupdate_cfg *sw, const char *descfile)
 	 * versions in numbers to be compared and check to get a
 	 * newer version
 	 */
-	if (sw->check_max_version) {
-		if (compare_versions(sw->version, sw->maximum_version) > 0) {
+	if (sw->update_type->check_max_version) {
+		if (compare_versions(sw->version, sw->update_type->maximum_version) > 0) {
 			ERROR("Max version set: new version %s > max allowed %s",
-				sw->version, sw->maximum_version);
+				sw->version, sw->update_type->maximum_version);
 			return -EPERM;
 		}
 	}
@@ -245,11 +264,11 @@ int parse(struct swupdate_cfg *sw, const char *descfile)
 	 * If reinstalling is not allowed, compare
 	 * version strings
 	 */
-	if (sw->no_reinstalling) {
+	if (sw->update_type->no_reinstalling) {
 
-		if (strcmp(sw->version, sw->current_version) == 0) {
+		if (strcmp(sw->version, sw->update_type->current_version) == 0) {
 			ERROR("No reinstalling allowed: new version %s == installed %s",
-				sw->version, sw->current_version);
+				sw->version, sw->update_type->current_version);
 			return -EPERM;
 		}
 	}
diff --git a/core/stream_interface.c b/core/stream_interface.c
index d8e093ad..3a504427 100644
--- a/core/stream_interface.c
+++ b/core/stream_interface.c
@@ -859,18 +859,18 @@ void set_version_range(const char *minversion,
 		const char *maxversion, const char *current)
 {
 	if (minversion && strnlen(minversion, SWUPDATE_GENERAL_STRING_SIZE)) {
-		strlcpy(inst.software->minimum_version, minversion,
-			sizeof(inst.software->minimum_version));
-		inst.software->no_downgrading = true;
+		strlcpy(inst.software->update_type->minimum_version, minversion,
+			sizeof(inst.software->update_type->minimum_version));
+		inst.software->update_type->no_downgrading = true;
 	}
 	if (maxversion && strnlen(maxversion, SWUPDATE_GENERAL_STRING_SIZE)) {
-		strlcpy(inst.software->maximum_version, maxversion,
-			sizeof(inst.software->maximum_version));
-		inst.software->check_max_version = true;
+		strlcpy(inst.software->update_type->maximum_version, maxversion,
+			sizeof(inst.software->update_type->maximum_version));
+		inst.software->update_type->check_max_version = true;
 	}
 	if (current && strnlen(current, SWUPDATE_GENERAL_STRING_SIZE)) {
-		strlcpy(inst.software->current_version, current,
-			sizeof(inst.software->current_version));
-		inst.software->no_reinstalling = true;
+		strlcpy(inst.software->update_type->current_version, current,
+			sizeof(inst.software->update_type->current_version));
+		inst.software->update_type->no_reinstalling = true;
 	}
 }
diff --git a/core/swupdate.c b/core/swupdate.c
index 8a0a4df5..e4f29ca5 100644
--- a/core/swupdate.c
+++ b/core/swupdate.c
@@ -265,6 +265,7 @@ static int parse_image_selector(const char *selector, struct swupdate_cfg *sw)
 
 static void swupdate_init(struct swupdate_cfg *sw)
 {
+	struct swupdate_type_cfg *update_type = calloc (1, sizeof(*update_type));
 	/* Initialize internal tree to store configuration */
 	memset(sw, 0, sizeof(*sw));
 	LIST_INIT(&sw->images);
@@ -272,6 +273,11 @@ static void swupdate_init(struct swupdate_cfg *sw)
 	LIST_INIT(&sw->scripts);
 	LIST_INIT(&sw->bootloader);
 	LIST_INIT(&sw->extprocs);
+	LIST_INIT(&sw->swupdate_types);
+	strlcpy(update_type->type_name, "default", sizeof(update_type->type_name));
+	LIST_INSERT_HEAD(&sw->swupdate_types, update_type, next);
+	sw->update_type = update_type;
+
 	sw->cert_purpose = SSL_PURPOSE_DEFAULT;
 
 #ifdef CONFIG_MTD
@@ -295,6 +301,28 @@ static int parse_cert_purpose(const char *text)
 	exit(EXIT_FAILURE);
 }
 
+static void read_type_settings(void *elem, struct swupdate_type_cfg *typecfg)
+{
+	GET_FIELD_STRING(LIBCFG_PARSER, elem,
+				"postupdatecmd", typecfg->postupdatecmd);
+	GET_FIELD_STRING(LIBCFG_PARSER, elem,
+				"preupdatecmd", typecfg->preupdatecmd);
+
+	GET_FIELD_STRING(LIBCFG_PARSER, elem,
+				"no-downgrading", typecfg->minimum_version);
+
+	if (strlen(typecfg->minimum_version))
+		typecfg->no_downgrading = true;
+	GET_FIELD_STRING(LIBCFG_PARSER, elem,
+				"max-version", typecfg->maximum_version);
+	if (strlen(typecfg->maximum_version))
+		typecfg->check_max_version = true;
+	GET_FIELD_STRING(LIBCFG_PARSER, elem,
+				"no-reinstalling", typecfg->current_version);
+	if (strlen(typecfg->current_version))
+		typecfg->no_reinstalling = true;
+}
+
 static int read_globals_settings(void *elem, void *data)
 {
 	char tmp[SWUPDATE_GENERAL_STRING_SIZE] = "";
@@ -317,10 +345,6 @@ static int read_globals_settings(void *elem, void *data)
 				"aes-key-file", sw->aeskeyfname);
 	GET_FIELD_STRING(LIBCFG_PARSER, elem,
 				"mtd-blacklist", sw->mtdblacklist);
-	GET_FIELD_STRING(LIBCFG_PARSER, elem,
-				"postupdatecmd", sw->postupdatecmd);
-	GET_FIELD_STRING(LIBCFG_PARSER, elem,
-				"preupdatecmd", sw->preupdatecmd);
 	GET_FIELD_STRING(LIBCFG_PARSER, elem,
 				"namespace-vars", sw->namespace_for_vars);
 	GET_FIELD_STRING(LIBCFG_PARSER, elem,
@@ -333,8 +357,6 @@ static int read_globals_settings(void *elem, void *data)
 	GET_FIELD_BOOL(LIBCFG_PARSER, elem, "verbose", &sw->verbose);
 	GET_FIELD_INT(LIBCFG_PARSER, elem, "loglevel", &sw->loglevel);
 	GET_FIELD_BOOL(LIBCFG_PARSER, elem, "syslog", &sw->syslog_enabled);
-	GET_FIELD_STRING(LIBCFG_PARSER, elem,
-				"no-downgrading", sw->minimum_version);
 	tmp[0] = '\0';
 	GET_FIELD_STRING(LIBCFG_PARSER, elem,
 				"fwenv-config-location", tmp);
@@ -342,16 +364,6 @@ static int read_globals_settings(void *elem, void *data)
 		set_fwenv_config(tmp);
 		tmp[0] = '\0';
 	}
-	if (strlen(sw->minimum_version))
-		sw->no_downgrading = true;
-	GET_FIELD_STRING(LIBCFG_PARSER, elem,
-				"max-version", sw->maximum_version);
-	if (strlen(sw->maximum_version))
-		sw->check_max_version = true;
-	GET_FIELD_STRING(LIBCFG_PARSER, elem,
-				"no-reinstalling", sw->current_version);
-	if (strlen(sw->current_version))
-		sw->no_reinstalling = true;
 	GET_FIELD_STRING(LIBCFG_PARSER, elem,
 				"cert-purpose", tmp);
 	if (tmp[0] != '\0')
@@ -372,6 +384,9 @@ static int read_globals_settings(void *elem, void *data)
 	GET_FIELD_INT(LIBCFG_PARSER, elem, "sw-description-max-size",
 				&sw->swdesc_max_size);
 
+
+	read_type_settings(elem, sw->update_type);
+
 	return 0;
 }
 
@@ -679,9 +694,9 @@ int main(int argc, char **argv)
 			break;
 		case '3':
 			if (optarg) {
-				swcfg.check_max_version = true;
-				strlcpy(swcfg.maximum_version, optarg,
-					sizeof(swcfg.maximum_version));
+				swcfg.update_type->check_max_version = true;
+				strlcpy(swcfg.update_type->maximum_version, optarg,
+					sizeof(swcfg.update_type->maximum_version));
 			}
 			break;
 #ifdef CONFIG_ENCRYPTED_IMAGES
@@ -692,15 +707,15 @@ int main(int argc, char **argv)
 			break;
 #endif
 		case 'N':
-			swcfg.no_downgrading = true;
-			if (optarg) strlcpy(swcfg.minimum_version, optarg,
-					    sizeof(swcfg.minimum_version));
+			swcfg.update_type->no_downgrading = true;
+			if (optarg) strlcpy(swcfg.update_type->minimum_version, optarg,
+					    sizeof(swcfg.update_type->minimum_version));
 			break;
 		case 'R':
 			if (optarg) {
-				swcfg.no_reinstalling = true;
-				strlcpy(swcfg.current_version, optarg,
-					sizeof(swcfg.current_version));
+				swcfg.update_type->no_reinstalling = true;
+				strlcpy(swcfg.update_type->current_version, optarg,
+					sizeof(swcfg.update_type->current_version));
 			}
 			break;
 		case 'M':
@@ -771,12 +786,12 @@ int main(int argc, char **argv)
 			opt_c = true;
 			break;
 		case 'p':
-			if (optarg) strlcpy(swcfg.postupdatecmd, optarg,
-					    sizeof(swcfg.postupdatecmd));
+			if (optarg) strlcpy(swcfg.update_type->postupdatecmd, optarg,
+					    sizeof(swcfg.update_type->postupdatecmd));
 			break;
 		case 'P':
-			if (optarg )strlcpy(swcfg.preupdatecmd, optarg,
-					    sizeof(swcfg.preupdatecmd));
+			if (optarg )strlcpy(swcfg.update_type->preupdatecmd, optarg,
+					    sizeof(swcfg.update_type->preupdatecmd));
 			break;
 		default:
 			fprintf(stdout, "Try %s -h for usage\n", argv[0]);
diff --git a/include/swupdate.h b/include/swupdate.h
index a36ffb87..99aaf5c9 100644
--- a/include/swupdate.h
+++ b/include/swupdate.h
@@ -36,10 +36,30 @@ struct extproc {
 
 LIST_HEAD(proclist, extproc);
 
+/*
+ * This is used for per type configuration
+ * if no type is set, the type "default" (always set)
+ * is taken.
+ */
+struct swupdate_type_cfg {
+	char type_name[SWUPDATE_GENERAL_STRING_SIZE];
+	char minimum_version[SWUPDATE_GENERAL_STRING_SIZE];
+	char maximum_version[SWUPDATE_GENERAL_STRING_SIZE];
+	char current_version[SWUPDATE_GENERAL_STRING_SIZE];
+	char postupdatecmd[SWUPDATE_GENERAL_STRING_SIZE];
+	char preupdatecmd[SWUPDATE_GENERAL_STRING_SIZE];
+	bool no_downgrading;
+	bool no_reinstalling;
+	bool check_max_version;
+	LIST_ENTRY(swupdate_type_cfg) next;
+};
+LIST_HEAD(swupdate_type_list, swupdate_type_cfg);
+
 struct swupdate_parms {
 	bool dry_run;
 	char software_set[SWUPDATE_GENERAL_STRING_SIZE];
 	char running_mode[SWUPDATE_GENERAL_STRING_SIZE];
+	struct swupdate_type_cfg *type;
 };
 
 struct swupdate_cfg {
@@ -52,28 +72,21 @@ struct swupdate_cfg {
 	char output_swversions[SWUPDATE_GENERAL_STRING_SIZE];
 	char publickeyfname[SWUPDATE_GENERAL_STRING_SIZE];
 	char aeskeyfname[SWUPDATE_GENERAL_STRING_SIZE];
-	char postupdatecmd[SWUPDATE_GENERAL_STRING_SIZE];
-	char preupdatecmd[SWUPDATE_GENERAL_STRING_SIZE];
-	char minimum_version[SWUPDATE_GENERAL_STRING_SIZE];
-	char maximum_version[SWUPDATE_GENERAL_STRING_SIZE];
-	char current_version[SWUPDATE_GENERAL_STRING_SIZE];
 	char mtdblacklist[SWUPDATE_GENERAL_STRING_SIZE];
 	char forced_signer_name[SWUPDATE_GENERAL_STRING_SIZE];
 	char namespace_for_vars[SWUPDATE_GENERAL_STRING_SIZE];
 	void *lua_state;
 	bool syslog_enabled;
-	bool no_downgrading;
-	bool no_reinstalling;
-	bool no_transaction_marker;
-	bool no_state_marker;
-	bool reboot_required;
-	bool check_max_version;
 	bool verbose;
 	int loglevel;
 	int cert_purpose;
+	bool no_transaction_marker;
+	bool no_state_marker;
+	bool reboot_required;
 	struct hw_type hw;
 	struct hwlist hardware;
 	struct swver installed_sw_list;
+	struct swupdate_type_list swupdate_types;
 	struct imglist images;
 	struct imglist scripts;
 	struct dict bootloader;
@@ -82,6 +95,7 @@ struct swupdate_cfg {
 	struct proclist extprocs;
 	void *dgst;	/* Structure for signed images */
 	struct swupdate_parms parms;
+	struct swupdate_type_cfg *update_type;
 	const char *embscript;
 	char gpg_home_directory[SWUPDATE_GENERAL_STRING_SIZE];
 	char gpgme_protocol[SWUPDATE_GENERAL_STRING_SIZE];
-- 
2.44.3

