From 745b13f22869e3aec85927d5e885fea16c7b91c0 Mon Sep 17 00:00:00 2001
From: Ian Dannapel <ian.dannapel@iris-sensing.com>
Date: Tue, 11 Apr 2023 17:26:25 +0200
Subject: [PATCH] tc358746: Use gpio reset instead of sotware reset

Signed-off-by: Ian Dannapel <ian.dannapel@iris-sensing.com>
---
 drivers/media/i2c/tc358746.c | 60 +++++++++++++++++-------------------
 1 file changed, 28 insertions(+), 32 deletions(-)

diff --git a/drivers/media/i2c/tc358746.c b/drivers/media/i2c/tc358746.c
index d2a5206101f8..339aeec37e2b 100644
--- a/drivers/media/i2c/tc358746.c
+++ b/drivers/media/i2c/tc358746.c
@@ -102,7 +102,6 @@ struct tc358746_state {
 	struct mutex confctl_mutex;
 	struct v4l2_mbus_framefmt fmt;
 	struct v4l2_ctrl_handler hdl;
-	bool fmt_changed;
 	bool test;
 
 	/*
@@ -138,6 +137,7 @@ struct tc358746_state {
 	struct v4l2_ctrl *sensor_hblank_ctrl;
 	unsigned int pclk;
 	unsigned int hblank;
+	u16 confctl_val;
 };
 
 struct tc358746_mbus_fmt {
@@ -821,6 +821,16 @@ static inline void tc358746_sleep_mode(struct v4l2_subdev *sd, int enable)
 			enable ? SYSCTL_SLEEP_MASK : 0);
 }
 
+static void tc358746_gpio_reset(struct tc358746_state *state)
+{
+	v4l2_info(&state->sd, "gpio reset\n");
+	usleep_range(5000, 10000);
+	gpiod_set_value(state->reset_gpio, 1);
+	usleep_range(1000, 2000);
+	gpiod_set_value(state->reset_gpio, 0);
+	msleep(20);
+}
+
 static inline void tc358746_sreset(struct v4l2_subdev *sd)
 {
 	i2c_wr16(sd, SYSCTL, SYSCTL_SRESET_MASK);
@@ -1032,6 +1042,13 @@ static void tc358746_enable_csi_module(struct v4l2_subdev *sd, int enable)
 	tc358746_wr_csi_control(sd, val);
 }
 
+static void tc358746_set_sync_pol(struct v4l2_subdev *sd)
+{
+	struct tc358746_state *state = to_state(sd);
+	u16 confctl_mask = CONFCTL_VVALIDP_MASK | CONFCTL_HVALIDP_MASK;
+	i2c_wr16_and_or(&state->sd, CONFCTL, confctl_mask, state->confctl_val);
+}
+
 static void tc358746_set_buffers(struct v4l2_subdev *sd)
 {
 	struct tc358746_state *state = to_state(sd);
@@ -1135,13 +1152,7 @@ static int tc358746_s_power(struct v4l2_subdev *sd, int on)
 {
 	struct tc358746_state *state = to_state(sd);
 
-	/*
-	 * REF_01:
-	 * Softreset don't reset configuration registers content but is needed
-	 * during power-on to trigger a csi LP-11 state change and during
-	 * power-off to disable the csi-module.
-	 */
-	tc358746_sreset(sd);
+	tc358746_gpio_reset(state);
 
 	/* always reconfigure the PLL and CSI registers after a sw reset */
 	/* switch to sleep mode as recommend in REF_01 */
@@ -1152,11 +1163,11 @@ static int tc358746_s_power(struct v4l2_subdev *sd, int on)
 	tc358746_set_buffers(sd);
 	tc358746_set_csi(sd);
 	tc358746_set_csi_color_space(sd);
-
-	state->fmt_changed = false;
-
 	tc358746_enable_csi_lanes(sd, on);
 	tc358746_enable_csi_module(sd, on);
+
+	tc358746_set_sync_pol(sd);
+
 	tc358746_sleep_mode(sd, !on);
 
 	return 0;
@@ -1292,14 +1303,13 @@ static int tc358746_set_fmt(struct v4l2_subdev *sd,
 	*mbusformat = format->format;
 
 	if (format->which == V4L2_SUBDEV_FORMAT_ACTIVE) {
-		state->fmt_changed = true;
 		state->vb_fifo = vb_fifo;
 		if (new_freq != cur_freq)
 			v4l2_ctrl_s_ctrl(state->link_freq, new_freq);
 	}
 
-	tc358746_s_power(sd, 0);
-	tc358746_s_power(sd, 1);
+	tc358746_set_buffers(sd);
+	tc358746_sreset(sd);
 	return 0;
 }
 
@@ -1347,7 +1357,6 @@ tc358746_link_validate(struct v4l2_subdev *sd, struct media_link *link,
 		return -EINVAL;
 	}
 
-	state->fmt_changed = true;
 	state->vb_fifo = vb_fifo;
 
 	return 0;
@@ -1518,15 +1527,6 @@ static int tc358746_set_lane_settings(struct tc358746_state *state,
 	return 0;
 }
 
-static void tc358746_gpio_reset(struct tc358746_state *state)
-{
-	usleep_range(5000, 10000);
-	gpiod_set_value(state->reset_gpio, 1);
-	usleep_range(1000, 2000);
-	gpiod_set_value(state->reset_gpio, 0);
-	msleep(20);
-}
-
 static int tc358746_apply_fw(struct tc358746_state *state)
 {
 	struct v4l2_subdev *sd = &state->sd;
@@ -1669,8 +1669,7 @@ static int tc358746_probe_fw(struct tc358746_state *state)
 	if (ret)
 		goto free_ep;
 
-	state->reset_gpio = devm_gpiod_get_optional(dev, "reset",
-						    GPIOD_OUT_LOW);
+	state->reset_gpio = devm_gpiod_get(dev, "reset", GPIOD_OUT_LOW);
 	if (IS_ERR(state->reset_gpio)) {
 		v4l2_err(sd, "failed to get reset gpio\n");
 		ret =  PTR_ERR(state->reset_gpio);
@@ -1705,7 +1704,7 @@ static int tc358746_async_register(struct tc358746_state *state)
 	struct v4l2_async_subdev *asd = NULL;
 	struct fwnode_handle *ep;
 	struct v4l2_fwnode_bus_parallel *bus;
-	u16 confctl_mask, confctl_val;
+	u16 confctl_val;
 	int ret;
 
 	v4l2_async_notifier_init(&state->notifier);
@@ -1728,9 +1727,7 @@ static int tc358746_async_register(struct tc358746_state *state)
 		goto err;
 	}
 
-	confctl_mask = CONFCTL_VVALIDP_MASK | CONFCTL_HVALIDP_MASK;
 	confctl_val = 0;
-
 	if (bus->flags & V4L2_MBUS_VSYNC_ACTIVE_LOW) {
 		confctl_val |= CONFCTL_VVALIDP_MASK;
 	}
@@ -1738,8 +1735,7 @@ static int tc358746_async_register(struct tc358746_state *state)
 	if (bus->flags & V4L2_MBUS_HSYNC_ACTIVE_LOW) {
 		confctl_val |= CONFCTL_HVALIDP_MASK;
 	}
-
-	i2c_wr16_and_or(&state->sd, CONFCTL, confctl_mask, confctl_val);
+	state->confctl_val = confctl_val;
 
 	asd = v4l2_async_notifier_add_fwnode_remote_subdev(&state->notifier, ep, struct v4l2_async_subdev);
 
@@ -1839,7 +1835,7 @@ static int tc358746_probe(struct i2c_client *client)
 	state->fmt = tc358746_def_fmt;
 
 	/* Apply default settings */
-	tc358746_sreset(sd);
+	tc358746_gpio_reset(state);
 	tc358746_sleep_mode(sd, 1);
 	tc358746_set_pll(sd);
 
-- 
2.34.1

