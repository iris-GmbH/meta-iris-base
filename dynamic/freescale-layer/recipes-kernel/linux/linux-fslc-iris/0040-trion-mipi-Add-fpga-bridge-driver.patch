From 07ae44a5728e7bbac990f02bb017203f58b64dd3 Mon Sep 17 00:00:00 2001
From: Ian Dannapel <ian.dannapel@iris-sensing.com>
Date: Wed, 16 Oct 2024 15:30:24 +0000
Subject: [PATCH] trion-mipi: Add fpga bridge driver

Signed-off-by: Ian Dannapel <ian.dannapel@iris-sensing.com>
---
 drivers/media/i2c/Kconfig      |  16 +
 drivers/media/i2c/Makefile     |   1 +
 drivers/media/i2c/trion-mipi.c | 617 +++++++++++++++++++++++++++++++++
 3 files changed, 634 insertions(+)
 create mode 100644 drivers/media/i2c/trion-mipi.c

diff --git a/drivers/media/i2c/Kconfig b/drivers/media/i2c/Kconfig
index 206fccddeac7..26cbce1678c4 100644
--- a/drivers/media/i2c/Kconfig
+++ b/drivers/media/i2c/Kconfig
@@ -1241,6 +1241,22 @@ config VIDEO_TC358746
 	  To compile this driver as a module, choose M here: the
 	  module will be called tc358746.
 
+config VIDEO_TRION_MIPI
+	tristate "Efinix Trion parallel-CSI2 bridge"
+	depends on VIDEO_DEV && I2C
+	select FW_UPLOAD
+	select FPGA 
+	select FPGA_MGR_EFINIX_SPI
+	select VIDEO_V4L2_SUBDEV_API
+	select MEDIA_CONTROLLER
+	select V4L2_FWNODE
+	select GENERIC_PHY
+	select GENERIC_PHY_MIPI_DPHY
+	select REGMAP_I2C
+	help
+	  Support for the Generic PARALLEL to MIPI CSI-2 bridge.
+	  Module compilation not supported.
+
 config VIDEO_TVP514X
 	tristate "Texas Instruments TVP514x video decoder"
 	depends on VIDEO_DEV && I2C
diff --git a/drivers/media/i2c/Makefile b/drivers/media/i2c/Makefile
index 5a2fda724b50..94d379301d27 100644
--- a/drivers/media/i2c/Makefile
+++ b/drivers/media/i2c/Makefile
@@ -130,6 +130,7 @@ obj-$(CONFIG_VIDEO_ST_MIPID02) += st-mipid02.o
 obj-$(CONFIG_VIDEO_ST_VGXY61) += st-vgxy61.o
 obj-$(CONFIG_VIDEO_TC358743) += tc358743.o
 obj-$(CONFIG_VIDEO_TC358746) += tc358746.o
+obj-$(CONFIG_VIDEO_TRION_MIPI) += trion-mipi.o
 obj-$(CONFIG_VIDEO_TDA1997X) += tda1997x.o
 obj-$(CONFIG_VIDEO_TDA7432) += tda7432.o
 obj-$(CONFIG_VIDEO_TDA9840) += tda9840.o
diff --git a/drivers/media/i2c/trion-mipi.c b/drivers/media/i2c/trion-mipi.c
new file mode 100644
index 000000000000..8818eee584e0
--- /dev/null
+++ b/drivers/media/i2c/trion-mipi.c
@@ -0,0 +1,617 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * Efinix Trion - Parallel -> CSI-2 Bridge
+ *
+ * Copyright 2024 Ian Dannapel <ian.dannapel@iris-sensing.com>
+ *
+ */
+
+#include <linux/clk.h>
+#include <linux/delay.h>
+#include <linux/errno.h>
+#include <linux/i2c.h>
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/types.h>
+#include <linux/regulator/consumer.h>
+#include <linux/videodev2.h>
+#include <media/v4l2-device.h>
+#include <media/v4l2-mc.h>
+#include <media/v4l2-fwnode.h>
+
+#include <linux/fpga/fpga-mgr.h>
+#include <linux/firmware.h>
+
+/* Regs Addrs */
+#define TRION_MIPI_REG_MAGIC 0x10
+#define TRION_MIPI_REG_VERSION 0x11
+
+/* Defines */
+#define TRION_MIPI_REG_MAGIC_VALUE 0x49
+
+static const struct v4l2_mbus_framefmt trion_mipi_def_fmt = {
+    .width      = 320,
+    .height     = 120,
+    .code       = MEDIA_BUS_FMT_Y14_1X14,
+    .field      = V4L2_FIELD_NONE,
+    .colorspace = V4L2_COLORSPACE_DEFAULT,
+    .ycbcr_enc  = V4L2_YCBCR_ENC_DEFAULT,
+    .quantization   = V4L2_QUANTIZATION_DEFAULT,
+    .xfer_func  = V4L2_XFER_FUNC_DEFAULT,
+};
+
+struct trion_mipi_mbus_fmt {
+    u32 code;
+    u8 bus_width;
+    u8 bpp; /* total bpp */
+    u8 ppp; /* pclk per pixel */
+};
+
+
+static const struct trion_mipi_mbus_fmt trion_mipi_formats[] = {
+    {
+        .code = MEDIA_BUS_FMT_Y14_1X14,
+        .bus_width = 14,
+        .bpp = 14,
+        .ppp = 1,
+    }
+};
+
+enum {
+    SINK_PAD,
+    SOURCE_PAD,
+    NR_PADS
+};
+
+struct trion_mipi {
+    /*
+     * Generic
+     */
+    struct v4l2_subdev sd;
+    struct v4l2_mbus_framefmt fmt;
+    struct media_pad pad[NR_PADS];
+    struct v4l2_fwnode_endpoint ep;
+    struct v4l2_async_notifier notifier;
+    struct i2c_client *i2c_client;
+
+    int is_streaming;
+
+    /* FPGA Manager */
+    struct fpga_manager *fpga_mgr;
+    const char *fpga_bitfile;
+    struct fpga_image_info fpga_image;
+
+    /* FW ops */
+    struct fw_upload *fwl;
+
+    /*
+     * Chip Clocks
+     */
+    struct clk  *refclk;
+
+    /*
+     * CSI TX
+     */
+    struct v4l2_fwnode_endpoint rx;
+
+    /*
+     * Parallel input
+     */
+};
+
+/*
+TODO: Unused for now.
+static int trion_mipi_write_register(struct i2c_client *client, u8 reg, u8 value)
+{
+    int ret;
+
+    ret = i2c_smbus_write_byte_data(client, reg, value);
+    if (ret < 0) {
+        dev_err(&client->dev, "Failed to write 0x%x to register 0x%x\n", value, reg);
+    }
+
+    return ret;
+}
+*/
+
+static int trion_mipi_read_register(struct i2c_client *client, u8 reg)
+{
+    s32 data;
+
+    data = i2c_smbus_read_byte_data(client, reg);
+    if (data < 0) {
+        dev_err(&client->dev, "Failed to read register 0x%x\n", reg);
+        return data;
+    }
+
+    return data;
+}
+
+static int trion_mipi_format_supported(u32 code) {
+    unsigned int i;
+
+    for (i = 0; i < ARRAY_SIZE(trion_mipi_formats); i++)
+        if (trion_mipi_formats[i].code == code)
+            return i;
+
+    return -EINVAL;
+}
+
+static inline struct trion_mipi *to_trion_mipi(struct v4l2_subdev *sd)
+{
+    return container_of(sd, struct trion_mipi, sd);
+}
+
+static int trion_mipi_s_stream(struct v4l2_subdev *sd, int enable)
+{
+    struct trion_mipi *sensor = to_trion_mipi(sd);
+    sensor->is_streaming = enable;
+    return 0;
+}
+
+static int trion_mipi_s_power(struct v4l2_subdev *sd, int on)
+{
+    return 0;
+}
+
+static int trion_mipi_load_fw(struct v4l2_subdev *sd)
+{
+    struct trion_mipi *sensor = to_trion_mipi(sd);
+    struct fpga_image_info fpga_image = { 0 };
+    int ret = 0;
+
+    fpga_image.flags = 0;
+    fpga_image.firmware_name = kstrdup(sensor->fpga_bitfile, GFP_KERNEL);
+
+    if (!fpga_image.firmware_name) {
+        v4l2_err(sd, "Failed to allocate memory for firmware name\n");
+        return -ENOMEM;
+    }
+
+    ret = fpga_mgr_load(sensor->fpga_mgr, &fpga_image);
+    if (ret) {
+        v4l2_err(sd, "Failed to load firmware to device (%d)\n", ret);
+        goto cleanup;
+    }
+
+cleanup:
+    kfree(fpga_image.firmware_name);
+    return ret;
+}
+
+static const struct v4l2_subdev_core_ops trion_mipi_core_ops = {
+    .s_power = trion_mipi_s_power,
+    .load_fw = trion_mipi_load_fw,
+};
+
+static int trion_mipi_g_frame_interval(struct v4l2_subdev *sd,
+                   struct v4l2_subdev_frame_interval *fi)
+{
+    return 0;
+}
+
+static int trion_mipi_s_frame_interval(struct v4l2_subdev *sd,
+                   struct v4l2_subdev_frame_interval *fi)
+{
+    return 0;
+}
+
+static int trion_mipi_get_fmt(struct v4l2_subdev *sd,
+              struct v4l2_subdev_state *sd_state,
+              struct v4l2_subdev_format *format)
+{
+    struct trion_mipi *sensor = to_trion_mipi(sd);
+
+    if (format->pad != 0 && format->pad != 1)
+        return -EINVAL;
+
+    format->format.code = sensor->fmt.code;
+    format->format.width = sensor->fmt.width;
+    format->format.height = sensor->fmt.height;
+    format->format.field = sensor->fmt.field;
+    return 0;
+}
+
+static int trion_mipi_set_fmt(struct v4l2_subdev *sd,
+              struct v4l2_subdev_state *sd_state,
+              struct v4l2_subdev_format *format)
+{
+    struct trion_mipi *sensor = to_trion_mipi(sd);
+    struct v4l2_mbus_framefmt *mbus_fmt = &format->format;
+
+    if (format->which == V4L2_SUBDEV_FORMAT_TRY) {
+        *v4l2_subdev_get_try_format(sd, sd_state, 0) = *mbus_fmt;
+        return 0;
+    }
+    /* Only RAW14 320x120 is currently supported, so just return it */
+    if (trion_mipi_format_supported(format->format.code) >= 0){
+        sensor->fmt.code = format->format.code;
+    } else {
+        // code not supported, set our default
+        sensor->fmt.code = trion_mipi_formats[0].code;
+    }
+    return trion_mipi_get_fmt(sd, sd_state, format);
+}
+
+static int trion_mipi_enum_mbus_code(struct v4l2_subdev *sd,
+                struct v4l2_subdev_state *sd_state,
+                struct v4l2_subdev_mbus_code_enum *code)
+{
+    if (code->index >= ARRAY_SIZE(trion_mipi_formats))
+        return -EINVAL;
+
+    code->code = trion_mipi_formats[code->index].code;
+    return 0;
+}
+
+
+static const struct v4l2_subdev_pad_ops trion_mipi_pad_ops = {
+    .set_fmt         = trion_mipi_set_fmt,
+    .get_fmt         = trion_mipi_get_fmt,
+    .enum_mbus_code  = trion_mipi_enum_mbus_code,
+};
+
+static const struct v4l2_subdev_video_ops trion_mipi_video_ops = {
+    .g_frame_interval = trion_mipi_g_frame_interval,
+    .s_frame_interval = trion_mipi_s_frame_interval,
+    .s_stream         = trion_mipi_s_stream,
+};
+
+static const struct v4l2_subdev_ops trion_mipi_subdev_ops = {
+    .core  = &trion_mipi_core_ops,
+    .video = &trion_mipi_video_ops,
+    .pad   = &trion_mipi_pad_ops,
+};
+
+static int trion_mipi_link_setup(struct media_entity *entity,
+                  const struct media_pad *local,
+                  const struct media_pad *remote, u32 flags)
+{
+    return 0;
+}
+
+static const struct media_entity_operations trion_mipi_sd_media_ops = {
+    .link_setup = &trion_mipi_link_setup,
+    .link_validate = &v4l2_subdev_link_validate,
+};
+
+static int trion_mipi_notify_bound(struct v4l2_async_notifier *notifier,
+                 struct v4l2_subdev *sd,
+                 struct v4l2_async_connection *asd)
+{
+    struct trion_mipi *trion_mipi = container_of(notifier, struct trion_mipi, notifier);
+    u32 flags = MEDIA_LNK_FL_ENABLED | MEDIA_LNK_FL_IMMUTABLE;
+    struct media_pad *sink = &trion_mipi->pad[SINK_PAD];
+
+    return v4l2_create_fwnode_links_to_pad(sd, sink, flags);
+}
+
+static const struct v4l2_async_notifier_operations trion_mipi_notify_ops = {
+    .bound = trion_mipi_notify_bound,
+};
+
+static int trion_mipi_async_register(struct trion_mipi *sensor)
+{
+    struct v4l2_fwnode_endpoint vep = {
+        .bus_type = V4L2_MBUS_PARALLEL,
+    };
+    struct v4l2_async_connection *asd;
+    struct fwnode_handle *ep;
+    struct v4l2_mbus_config_parallel *bus;
+    int err;
+
+    ep = fwnode_graph_get_endpoint_by_id(dev_fwnode(sensor->sd.dev),
+                         SINK_PAD, 0, 0);
+    if (!ep)
+        return -ENOTCONN;
+
+    err = v4l2_fwnode_endpoint_parse(ep, &vep);
+    if (err) {
+        fwnode_handle_put(ep);
+        return err;
+    }
+
+    bus = &vep.bus.parallel;
+
+    if(!(bus->flags & (V4L2_MBUS_VSYNC_ACTIVE_LOW | V4L2_MBUS_HSYNC_ACTIVE_LOW))) {
+        v4l2_err(&sensor->sd,
+            "Unsupported hsync/vsync configuration for parallel endpoint");
+        return -EINVAL;
+    }
+
+    v4l2_async_subdev_nf_init(&sensor->notifier, &sensor->sd);
+    asd = v4l2_async_nf_add_fwnode_remote(&sensor->notifier, ep,
+                          struct v4l2_async_connection);
+    fwnode_handle_put(ep);
+
+    if (IS_ERR(asd)) {
+        err = PTR_ERR(asd);
+        goto err_cleanup;
+    }
+
+    sensor->notifier.ops = &trion_mipi_notify_ops;
+
+    err = v4l2_async_nf_register(&sensor->notifier);
+    if (err)
+        goto err_cleanup;
+
+    err = v4l2_async_register_subdev(&sensor->sd);
+    if (err)
+        goto err_unregister;
+
+    return 0;
+
+err_unregister:
+    v4l2_async_nf_unregister(&sensor->notifier);
+err_cleanup:
+    v4l2_async_nf_cleanup(&sensor->notifier);
+
+    return err;
+}
+
+#define MAX_BITFILE_SIZE (2 * 1024 * 1024) // 2MB
+
+static enum fw_upload_err trion_mipi_fw_prepare(struct fw_upload *fw_upload, const u8 *data, u32 size)
+{
+    struct trion_mipi *sensor = fw_upload->dd_handle;
+
+    if (!size || size > MAX_BITFILE_SIZE)
+        return FW_UPLOAD_ERR_INVALID_SIZE;
+
+    if (sensor->is_streaming){
+        v4l2_err(&sensor->sd, "Device is streaming\n");
+        return FW_UPLOAD_ERR_BUSY;
+    }
+
+    memset(&sensor->fpga_image, 0, sizeof(sensor->fpga_image));
+    sensor->fpga_image.buf = kzalloc(size, GFP_KERNEL);
+    if (!sensor->fpga_image.buf)
+        return FW_UPLOAD_ERR_RW_ERROR;
+
+    sensor->fpga_image.count = size;
+
+    return FW_UPLOAD_ERR_NONE;
+}
+
+static enum fw_upload_err trion_mipi_fw_write(struct fw_upload *fw_upload, const u8 *data, u32 offset, u32 size, u32 *written)
+{
+    struct trion_mipi *sensor = fw_upload->dd_handle;
+
+    if (offset + size > sensor->fpga_image.count) {
+        v4l2_err(&sensor->sd, "write exceeds buffer size\n");
+        kfree((void *)sensor->fpga_image.buf);
+        return FW_UPLOAD_ERR_RW_ERROR;
+    }
+
+    // data is already mapped in kernel space, no to copy_from_user
+    memcpy((void *)(sensor->fpga_image.buf + offset), data, size);
+
+    *written = size;
+
+    return FW_UPLOAD_ERR_NONE;
+}
+
+static enum fw_upload_err trion_mipi_fw_poll_complete(struct fw_upload *fw_upload)
+{
+    struct trion_mipi *sensor = fw_upload->dd_handle;
+
+    if (sensor->is_streaming) {
+        v4l2_err(&sensor->sd, "Device is streaming\n");
+        kfree((void *)sensor->fpga_image.buf);
+        return FW_UPLOAD_ERR_BUSY;
+    }
+
+    if (fpga_mgr_load(sensor->fpga_mgr, &sensor->fpga_image)) {
+        v4l2_err(&sensor->sd, "Failed to load firmware to device\n");
+        kfree((void *)sensor->fpga_image.buf);
+        return FW_UPLOAD_ERR_RW_ERROR;
+    }
+
+    msleep(10); // wait for fpga pll to lock
+
+    v4l2_info(&sensor->sd, "Updated device firmware successfully\n");
+
+    kfree((void *)sensor->fpga_image.buf);
+    return FW_UPLOAD_ERR_NONE;
+}
+
+static void trion_mipi_fw_cancel(struct fw_upload *fw_upload)
+{
+    struct trion_mipi *sensor = fw_upload->dd_handle;
+
+    kfree((void *)sensor->fpga_image.buf);
+}
+
+/* 
+fw_upload_ops: load from user space:
+echo 1 > /sys/devices/platform/soc@0/30800000.bus/30a30000.i2c/i2c-1/1-002a/firmware/1-002a/loading 
+cat irma6_ppi_mipi_fpga.bin > /sys/devices/platform/soc@0/30800000.bus/30a30000.i2c/i2c-1/1-002a/firmware/1-002a/data
+echo 0 > /sys/devices/platform/soc@0/30800000.bus/30a30000.i2c/i2c-1/1-002a/firmware/1-002a/loading
+*/
+static const struct fw_upload_ops trion_mipi_fw_ops = {
+    .prepare = trion_mipi_fw_prepare,
+    .write = trion_mipi_fw_write,
+    .poll_complete = trion_mipi_fw_poll_complete,
+    .cancel = trion_mipi_fw_cancel,
+};
+
+static int trion_mipi_probe(struct i2c_client *client)
+{
+    struct trion_mipi *sensor;
+    struct fwnode_handle *endpoint;
+    struct device *dev = &client->dev;
+    struct v4l2_subdev *sd;
+    struct device_node *fpga_mgr_node;
+    unsigned int refclk;
+    int ret;
+    u8 reg_value;
+    struct fw_upload *fwl;
+
+    sensor = devm_kzalloc(&client->dev, sizeof(*sensor), GFP_KERNEL);
+    if (!sensor)
+        return -ENOMEM;
+
+    /* This is not a i2c device yet, it needs to be loaded by fpga manager */
+    fpga_mgr_node = of_parse_phandle(dev->of_node, "fpga-mgr", 0);
+    sensor->fpga_mgr = of_fpga_mgr_get(fpga_mgr_node);
+    if (IS_ERR(sensor->fpga_mgr)) {
+        dev_err(dev, "fpga-mgr node or driver not found\n");
+        return -EINVAL;
+    }
+
+    ret = of_property_read_string(dev->of_node, "fpga-bin", &sensor->fpga_bitfile);
+    if (ret) {
+        dev_err(dev, "Could not parse fpga-bin property\n");
+        return ret;
+    }
+
+    ret = trion_mipi_load_fw(&sensor->sd);
+    if (ret)
+        return ret;
+
+    sensor->i2c_client = client;
+
+    endpoint = fwnode_graph_get_next_endpoint(dev_fwnode(&client->dev), NULL);
+    if (!endpoint) {
+        dev_err(dev, "endpoint node not found\n");
+        return -EINVAL;
+    }
+
+    /* Parse all clocks */
+    sensor->refclk = devm_clk_get(dev, NULL);
+    if (IS_ERR(sensor->refclk)) {
+        if (PTR_ERR(sensor->refclk) != -EPROBE_DEFER){
+            v4l2_err(sd, "failed to get refclk: %ld\n", PTR_ERR(sensor->refclk));
+            return -EINVAL;
+        }       
+    }
+
+    refclk = clk_get_rate(sensor->refclk);
+    if (refclk != 25000000) {
+        v4l2_err(sd, "Invalid refclk %u, valid range: 25 MHz\n", refclk);
+        return -EINVAL;
+    }
+
+    // enable FPGA clock
+    ret = clk_prepare_enable(sensor->refclk);
+    if (ret) {
+        v4l2_err(sd, "Failed to enable clock\n");
+        return -EINVAL;
+    }
+
+    msleep(10); // wait for fpga pll to lock
+
+    // Verify magic number after enabling the refclk
+    ret = trion_mipi_read_register(client, TRION_MIPI_REG_MAGIC);
+    if (ret < 0) {
+        dev_err(&client->dev, "Cannot read magic value\n");
+        return ret;
+    }
+
+    reg_value = ret;
+    if (reg_value != TRION_MIPI_REG_MAGIC_VALUE) {
+        dev_err(&client->dev, "Invalid magic value read: 0x%x\n", reg_value);
+        return -EINVAL;
+    }
+
+    // Verify version
+    ret = trion_mipi_read_register(client, TRION_MIPI_REG_VERSION);
+    if (ret < 0) {
+        dev_err(&client->dev, "Cannot read version value\n");
+        return ret;
+    }
+
+    reg_value = ret;
+    if (reg_value != 0x01) {
+        dev_err(&client->dev, "Version not supported: 0x%x\n", reg_value);
+        return -EINVAL;
+    }
+
+    dev_info(&client->dev, "Firmware Version: 0x%x\n", reg_value);
+
+    // parse endpoints
+    ret = v4l2_fwnode_endpoint_parse(endpoint, &sensor->ep);
+    fwnode_handle_put(endpoint);
+    if (ret) {
+        dev_err(dev, "Could not parse endpoint\n");
+        return -EINVAL;
+    }
+
+    v4l2_i2c_subdev_init(&sensor->sd, client, &trion_mipi_subdev_ops);
+
+    /*
+     * config default format
+     */
+    sensor->fmt = trion_mipi_def_fmt;
+
+    sd = &sensor->sd;
+    sd->flags          |= V4L2_SUBDEV_FL_HAS_DEVNODE;
+    sd->entity.ops      = &trion_mipi_sd_media_ops;
+    sd->entity.function = MEDIA_ENT_F_VID_IF_BRIDGE;
+    sensor->pad[0].flags = MEDIA_PAD_FL_SINK;
+    sensor->pad[1].flags = MEDIA_PAD_FL_SOURCE;
+
+    ret = media_entity_pads_init(&sd->entity, 2, sensor->pad);
+    if (ret)
+        goto fail;
+
+    sensor->is_streaming = false;
+    ret = trion_mipi_async_register(sensor);
+    if (ret)
+        goto fail;
+
+    // Firmware upload ops
+    fwl = firmware_upload_register(THIS_MODULE, &client->dev, dev_name(&client->dev), &trion_mipi_fw_ops, sensor);
+    if (IS_ERR(fwl)) {
+        dev_err(&client->dev, "Firmware Upload driver failed to start\n");
+        return PTR_ERR(fwl);
+    }
+
+    sensor->fwl = fwl;
+
+    v4l2_info(sd, "%s found @ 0x%x (%s)\n", client->name,
+          client->addr, client->adapter->name);
+    return 0;
+
+fail:
+    return ret;
+}
+
+static void trion_mipi_remove(struct i2c_client *client)
+{
+    struct v4l2_subdev *sd = i2c_get_clientdata(client);
+    struct trion_mipi *trion_mipi = to_trion_mipi(sd);
+
+    v4l2_subdev_cleanup(sd);
+    v4l2_fwnode_endpoint_free(&trion_mipi->ep);
+    v4l2_async_nf_unregister(&trion_mipi->notifier);
+    v4l2_async_nf_cleanup(&trion_mipi->notifier);
+    v4l2_async_unregister_subdev(sd);
+    media_entity_cleanup(&sd->entity);
+
+    firmware_upload_unregister(trion_mipi->fwl);
+}
+
+MODULE_DEVICE_TABLE(i2c, trion_mipi_id);
+
+static const struct of_device_id trion_mipi_dt_ids[] = {
+    { .compatible = "efinix,trion-mipi" },
+    { /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, trion_mipi_dt_ids);
+
+static struct i2c_driver trion_mipi_i2c_driver = {
+    .driver = {
+        .name   = "trion-mipi",
+        .of_match_table =  trion_mipi_dt_ids,
+    },
+    .probe = trion_mipi_probe,
+    .remove    = trion_mipi_remove,
+};
+
+module_i2c_driver(trion_mipi_i2c_driver);
+
+MODULE_DESCRIPTION("Efinix Trion parallel to mipi-csi driver");
+MODULE_AUTHOR("Ian Dannapel <Ian.Dannapel@iris-sensing.com>");
+MODULE_LICENSE("GPL");
-- 
2.44.1

