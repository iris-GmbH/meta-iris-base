From 0a96c08bf35e8da9be25a26f0d188ddbd53ce30b Mon Sep 17 00:00:00 2001
From: Erik Schumacher <erik.schumacher@iris-sensing.com>
Date: Wed, 10 Apr 2024 11:10:18 +0200
Subject: [PATCH] media/i2c: Add marec-fpga camera driver

Upstream-Status: Inappropriate [driver for iris specific hardware setup]

Signed-off-by: Erik Schumacher <erik.schumacher@iris-sensing.com>
---
 drivers/media/i2c/Kconfig      |   7 +
 drivers/media/i2c/Makefile     |   1 +
 drivers/media/i2c/marec-fpga.c | 396 +++++++++++++++++++++++++++++++++
 3 files changed, 404 insertions(+)
 create mode 100644 drivers/media/i2c/marec-fpga.c

diff --git a/drivers/media/i2c/Kconfig b/drivers/media/i2c/Kconfig
index 1e8141876073..4334fa1e98c1 100644
--- a/drivers/media/i2c/Kconfig
+++ b/drivers/media/i2c/Kconfig
@@ -612,6 +612,13 @@ config VIDEO_OX03C10_DRV
 	  This is a Video4Linux2 sensor driver for the OmniVision
 	  OX03C10 camera.
 
+config VIDEO_MAREC_FPGA
+	tristate "MAREC FPGA parallel camera support"
+	depends on I2C && VIDEO_DEV && FPGA
+	select V4L2_FWNODE
+	help
+	  This driver supports a MAREC imager as parallel camera through an FPGA
+
 config VIDEO_RDACM20
 	tristate "IMI RDACM20 camera support"
 	select VIDEO_MAX9271_LIB
diff --git a/drivers/media/i2c/Makefile b/drivers/media/i2c/Makefile
index 04d29000427f..a303d1450093 100644
--- a/drivers/media/i2c/Makefile
+++ b/drivers/media/i2c/Makefile
@@ -124,6 +124,7 @@ obj-$(CONFIG_VIDEO_SAA717X) += saa717x.o
 obj-$(CONFIG_VIDEO_SAA7185) += saa7185.o
 obj-$(CONFIG_VIDEO_SONY_BTF_MPX) += sony-btf-mpx.o
 obj-$(CONFIG_VIDEO_MT9M114) += mt9m114.o
+obj-$(CONFIG_VIDEO_MAREC_FPGA) += marec-fpga.o
 obj-$(CONFIG_VIDEO_ST_MIPID02) += st-mipid02.o
 obj-$(CONFIG_VIDEO_ST_VGXY61) += st-vgxy61.o
 obj-$(CONFIG_VIDEO_TC358743) += tc358743.o
diff --git a/drivers/media/i2c/marec-fpga.c b/drivers/media/i2c/marec-fpga.c
new file mode 100644
index 000000000000..4ffc39fe22ea
--- /dev/null
+++ b/drivers/media/i2c/marec-fpga.c
@@ -0,0 +1,396 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * marec-fpga.c MAREC FPGA parallel camera sensor driver
+ *
+ */
+
+#include <linux/clk.h>
+#include <linux/delay.h>
+#include <linux/errno.h>
+#include <linux/fpga/fpga-mgr.h>
+#include <linux/i2c.h>
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/types.h>
+#include <linux/videodev2.h>
+#include <media/v4l2-device.h>
+#include <media/v4l2-mediabus.h>
+#include <media/v4l2-fwnode.h>
+
+struct marec_fpga_format {
+	u32 mbus_code;
+	enum v4l2_colorspace colorspace;
+};
+
+struct marec_fpga {
+	struct v4l2_subdev sd;
+	struct v4l2_mbus_framefmt fmt;
+	struct media_pad pad;
+	struct v4l2_fwnode_endpoint ep;
+	struct i2c_client *i2c_client;
+	struct gpio_desc *powersave_en1;
+	struct gpio_desc *powersave_en2;
+};
+
+static int marec_fpga_read_reg(struct marec_fpga *sensor, u8 reg, u8 *val)
+{
+	struct i2c_client *client = sensor->i2c_client;
+	struct i2c_msg msg[2];
+	u8 buf[1];
+	int ret;
+
+	buf[0] = reg;
+
+	msg[0].addr = client->addr;
+	msg[0].flags = client->flags;
+	msg[0].buf = buf;
+	msg[0].len = sizeof(buf);
+
+	msg[1].addr = client->addr;
+	msg[1].flags = client->flags | I2C_M_RD;
+	msg[1].buf = buf;
+	msg[1].len = 1;
+
+	ret = i2c_transfer(client->adapter, msg, 2);
+	if (ret < 0) {
+		dev_err(&client->dev, "%s: error: reg=%x\n",
+			__func__, reg);
+		return ret;
+	}
+
+	*val = buf[0];
+	return 0;
+}
+
+static inline struct marec_fpga *to_marec_fpga(struct v4l2_subdev *sd)
+{
+	return container_of(sd, struct marec_fpga, sd);
+}
+
+static int marec_fpga_s_stream(struct v4l2_subdev *sd, int enable)
+{
+	return 0;
+}
+
+static int marec_fpga_s_power(struct v4l2_subdev *sd, int on)
+{
+	return 0;
+}
+
+static const struct v4l2_subdev_core_ops marec_fpga_core_ops = {
+	.s_power = marec_fpga_s_power,
+};
+
+static int marec_fpga_g_frame_interval(struct v4l2_subdev *sd,
+				   struct v4l2_subdev_frame_interval *fi)
+{
+	return 0;
+}
+
+static int marec_fpga_s_frame_interval(struct v4l2_subdev *sd,
+				   struct v4l2_subdev_frame_interval *fi)
+{
+	return 0;
+}
+
+static int marec_fpga_get_fmt(struct v4l2_subdev *sd,
+			  struct v4l2_subdev_state *sd_state,
+			  struct v4l2_subdev_format *format)
+{
+	struct marec_fpga *sensor = to_marec_fpga(sd);
+	struct v4l2_mbus_framefmt *fmt;
+
+	if (format->pad != 0)
+		return -EINVAL;
+
+	if (format->which == V4L2_SUBDEV_FORMAT_TRY)
+		fmt = v4l2_subdev_get_try_format(&sensor->sd, sd_state,
+						 format->pad);
+	else
+		fmt = &sensor->fmt;
+	format->format = *fmt;
+
+	return 0;
+}
+
+static int marec_fpga_set_fmt(struct v4l2_subdev *sd,
+			  struct v4l2_subdev_state *sd_state,
+			  struct v4l2_subdev_format *format)
+{
+	struct marec_fpga *sensor = to_marec_fpga(sd);
+	struct v4l2_mbus_framefmt *mbus_fmt = &format->format;
+
+	if (format->pad != 0)
+		return -EINVAL;
+
+	if (format->which == V4L2_SUBDEV_FORMAT_TRY) {
+		*v4l2_subdev_get_try_format(sd, sd_state, 0) = *mbus_fmt;
+		return 0;
+	}
+
+	/* update format even if code is unchanged, resolution might change */
+	sensor->fmt = *mbus_fmt;
+
+	return 0;
+}
+
+static int marec_fpga_enum_mbus_code(struct v4l2_subdev *sd,
+				 struct v4l2_subdev_state *sd_state,
+				 struct v4l2_subdev_mbus_code_enum *code)
+{
+	if (code->index >= 1)
+		return -EINVAL;
+
+	code->code = MEDIA_BUS_FMT_Y8_1X8;
+
+	v4l2_info(sd, "enum_mbus_code(%d) -> [%x]\n", code->index, code->code);
+
+	return 0;
+}
+
+static int marec_fpga_enum_frame_size(struct v4l2_subdev *sd,
+				  struct v4l2_subdev_state *sd_state,
+				  struct v4l2_subdev_frame_size_enum *fse)
+{
+	unsigned int index = fse->index;
+
+	if (fse->pad != 0)
+		return -EINVAL;
+
+	if (index > 2)
+		return -EINVAL;
+
+	switch(index) {
+		case 0:
+			fse->min_width = 100;
+			fse->min_height = 20;
+			break;
+		case 1:
+			fse->min_width  = 50;
+			fse->min_height = 40;
+			break;
+		case 2:
+			fse->min_width  = 50;
+			fse->min_height = 20;
+			break;
+		default:
+			break;
+	}
+
+	fse->max_width = fse->min_width;
+	fse->max_height = fse->min_height;
+
+	v4l2_info(sd, "enum_frame_size(%d) -> [%d x %d]\n", index, fse->max_width, fse->max_height);
+
+	return 0;
+}
+
+
+static const struct v4l2_subdev_pad_ops marec_fpga_pad_ops = {
+	.set_fmt         = marec_fpga_set_fmt,
+	.get_fmt         = marec_fpga_get_fmt,
+	.enum_frame_size = marec_fpga_enum_frame_size,
+	.enum_mbus_code  = marec_fpga_enum_mbus_code,
+};
+
+static const struct v4l2_subdev_video_ops marec_fpga_video_ops = {
+	.g_frame_interval = marec_fpga_g_frame_interval,
+	.s_frame_interval = marec_fpga_s_frame_interval,
+	.s_stream         = marec_fpga_s_stream,
+};
+
+static const struct v4l2_subdev_ops marec_fpga_subdev_ops = {
+	.core  = &marec_fpga_core_ops,
+	.video = &marec_fpga_video_ops,
+	.pad   = &marec_fpga_pad_ops,
+};
+
+
+static int marec_fpga_link_setup(struct media_entity *entity,
+			      const struct media_pad *local,
+			      const struct media_pad *remote, u32 flags)
+{
+	return 0;
+}
+
+static const struct media_entity_operations marec_fpga_sd_media_ops = {
+	.link_setup = marec_fpga_link_setup,
+};
+
+static int marec_fpga_probe(struct i2c_client *client)
+{
+	struct marec_fpga *sensor;
+	struct fwnode_handle *endpoint;
+	struct device *dev = &client->dev;
+	struct v4l2_subdev *sd;
+	struct v4l2_mbus_framefmt *fmt;
+	struct device_node *fpga_mgr_node;
+	struct fpga_manager *fpga_mgr;
+	struct fpga_image_info fpga_image;
+	struct clk *mclk;
+	const char *fpga_bitfile;
+	u8 read_buffer;
+	int ret;
+
+	sensor = devm_kzalloc(&client->dev, sizeof(*sensor), GFP_KERNEL);
+	if (!sensor)
+		return -ENOMEM;
+
+	/* Before doing anything, start the mclk */
+	mclk = devm_clk_get_optional_enabled(dev, "mclk");
+	if (IS_ERR(mclk))
+		return dev_err_probe(dev, PTR_ERR(mclk),
+				     "Could not enable fpga mclk\n");
+
+	/* read and set pwrsv_en1/2 gpios */
+	sensor->powersave_en1 = devm_gpiod_get_optional(dev, "pwrsv-en1",
+							GPIOD_OUT_HIGH);
+	if (IS_ERR(sensor->powersave_en1))
+		return dev_err_probe(dev, PTR_ERR(sensor->powersave_en1),
+				     "Could not retrieve pwrsv-en1 GPIO\n");
+
+	sensor->powersave_en2 = devm_gpiod_get_optional(dev, "pwrsv-en2",
+							GPIOD_OUT_HIGH);
+	if (IS_ERR(sensor->powersave_en2))
+		return dev_err_probe(dev, PTR_ERR(sensor->powersave_en2),
+				     "Could not retrieve pwrsv-en2 GPIO\n");
+
+	/* set PWRSV_EN1 to high */
+	if (sensor->powersave_en1)
+		gpiod_set_value(sensor->powersave_en1, 1);
+
+	/* PWRSV_EN2 is open drain, so setting '1' will put pin in tri-state */
+	if (sensor->powersave_en2)
+		gpiod_set_value(sensor->powersave_en2, 1);
+
+	udelay(1000);
+
+	/* This is not a i2c device yet, it needs to be loaded by fpga manager */
+	fpga_mgr_node = of_parse_phandle(dev->of_node, "fpga-mgr", 0);
+	fpga_mgr = of_fpga_mgr_get(fpga_mgr_node);
+	if (IS_ERR(fpga_mgr)) {
+		dev_err(dev, "fpga-mgr node or driver not found\n");
+		return -EINVAL;
+	}
+
+	ret = of_property_read_string(dev->of_node, "fpga-bin", &fpga_bitfile);
+	if (ret) {
+		dev_err(dev, "Could not parse fpga-bin property\n");
+		return ret;
+	}
+
+	/* fpga manager is set up, fill fpga_image_info */
+	fpga_image.flags = 0;
+	fpga_image.firmware_name = kstrdup(fpga_bitfile, GFP_KERNEL);
+
+	/* flash image */
+	ret = fpga_mgr_load(fpga_mgr, &fpga_image);
+
+	/* free kstrdup memory before proceeding */
+	kfree(fpga_image.firmware_name);
+
+	if (ret) {
+		dev_err(dev, "Failed to load fpga firmware to device (%d)\n", ret);
+		return ret;
+	}
+
+	sensor->i2c_client = client;
+
+	/* do dummy read from i2c */
+	ret = marec_fpga_read_reg(sensor, 0x00, &read_buffer);
+	if (ret) {
+		dev_err(dev, "i2c read error (%d)\n", ret);
+		return ret;
+	}
+
+	endpoint = fwnode_graph_get_next_endpoint(dev_fwnode(&client->dev), NULL);
+	if (!endpoint) {
+		dev_err(dev, "endpoint node not found\n");
+		return -EINVAL;
+	}
+
+	ret = v4l2_fwnode_endpoint_parse(endpoint, &sensor->ep);
+	fwnode_handle_put(endpoint);
+	if (ret) {
+		dev_err(dev, "Could not parse endpoint\n");
+		return ret;
+	}
+	if (sensor->ep.bus_type != V4L2_MBUS_PARALLEL) {
+		dev_err(dev, "Unsupported bus type %d\n", sensor->ep.bus_type);
+		return -EINVAL;
+	}
+
+	v4l2_i2c_subdev_init(&sensor->sd, client, &marec_fpga_subdev_ops);
+
+	/*
+	 * config default format
+	 */
+	fmt = &sensor->fmt;
+	fmt->code         = MEDIA_BUS_FMT_Y8_1X8;
+	fmt->colorspace   = V4L2_COLORSPACE_RAW;
+	fmt->xfer_func    = V4L2_XFER_FUNC_NONE;
+	fmt->width        = 100;
+	fmt->height       = 20;
+	fmt->field        = V4L2_FIELD_NONE;
+
+	sd = &sensor->sd;
+	sd->flags          |= V4L2_SUBDEV_FL_HAS_DEVNODE | V4L2_SUBDEV_FL_HAS_EVENTS;
+	sd->entity.ops      = &marec_fpga_sd_media_ops;
+	sd->entity.function = MEDIA_ENT_F_CAM_SENSOR;
+
+	sensor->pad.flags = MEDIA_PAD_FL_SOURCE;
+	ret = media_entity_pads_init(&sd->entity, 1, &sensor->pad);
+	if (ret)
+		goto entity_cleanup;
+
+	ret = v4l2_async_register_subdev_sensor(sd);
+	if (ret)
+		goto entity_cleanup;
+
+	v4l2_info(client, "marec_fpga is found\n");
+	return 0;
+
+entity_cleanup:
+	media_entity_cleanup(&sensor->sd.entity);
+	return ret;
+}
+
+static void marec_fpga_remove(struct i2c_client *client)
+{
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
+	struct marec_fpga *sensor = to_marec_fpga(sd);
+
+	v4l2_device_unregister_subdev(sd);
+	kfree(sensor);
+}
+
+static const struct i2c_device_id marec_fpga_id[] = {
+	{"marec-fpga", 0},
+	{},
+};
+
+MODULE_DEVICE_TABLE(i2c, marec_fpga_id);
+
+static const struct of_device_id marec_fpga_dt_ids[] = {
+	{ .compatible = "marec-fpga" },
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, marec_fpga_dt_ids);
+
+static struct i2c_driver marec_fpga_i2c_driver = {
+	.driver = {
+		.owner  = THIS_MODULE,
+		.name   = "marec_fpga",
+		.of_match_table = marec_fpga_dt_ids,
+	},
+	.probe     = marec_fpga_probe,
+	.remove    = marec_fpga_remove,
+	.id_table  = marec_fpga_id,
+};
+
+module_i2c_driver(marec_fpga_i2c_driver);
+
+MODULE_DESCRIPTION("MAREC FPGA parallel camera sensor driver");
+MODULE_AUTHOR("Erik Schumacher <Erik.Schumacher@iris-sensing.com>");
+MODULE_LICENSE("GPL");
-- 
2.47.0

