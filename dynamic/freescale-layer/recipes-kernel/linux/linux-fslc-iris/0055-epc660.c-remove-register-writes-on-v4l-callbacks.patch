From c58512710318cce2f8ae0d51ed5723cf62bf0b74 Mon Sep 17 00:00:00 2001
From: Ian Dannapel <ian.dannapel@iris-sensing.com>
Date: Mon, 3 Mar 2025 13:38:50 +0000
Subject: [PATCH] epc660.c: remove register writes on v4l callbacks

The epc660 configuration is fully managed from user space

Signed-off-by: Ian Dannapel <ian.dannapel@iris-sensing.com>
---
 drivers/media/i2c/epc660.c | 55 --------------------------------------
 1 file changed, 55 deletions(-)

diff --git a/drivers/media/i2c/epc660.c b/drivers/media/i2c/epc660.c
index 1bb12f71961d..acfa265daa2b 100644
--- a/drivers/media/i2c/epc660.c
+++ b/drivers/media/i2c/epc660.c
@@ -191,37 +191,7 @@ static int epc660_send_i2c_sequence(struct i2c_client *client, const u8 *seq)
 
 static int epc660_s_stream(struct v4l2_subdev *sd, int enable)
 {
-	struct i2c_client *client = v4l2_get_subdevdata(sd);
 	v4l2_info(sd, "%sable\n", enable ? "en" : "dis");
-	/*
-	 * 8.7.15. Shutter_Control ("Datasheet_epc660-V1.03.pdf" page 99)
-	 * 0xA4/0xA5 (because 16bit access here)
-	 * 0xA4 Shutter-Ctrl => bit[1]=multi_frame_en(0/1), bit[0]=shutter_en(0/1);
-	 * 0xA5 Power-Ctrl => bit[2:0] = 111b
-	 */
-	if (enable) {
-		/* Enable power */
-		if (reg_write_byte(client, EPC660_REG_POWER_CTRL, 0x07) < 0)
-			return -EIO;
-		// Do not set the LED driver register as the application shall have the possibilty to do that by hand
-		// 	if (reg_write_byte(client, EPC660_REG_LED_DRIVER, 0xe0) < 0)
-		//		return -EIO;
-		/* Switch to multi frame mode and enable shutter */
-		//		do not switch on the automatic shutter as the application shall have the possibilty to do that by hand
-		//		if (reg_write_byte(client, EPC660_REG_SHUTTER_CTRL, 0x03) < 0)
-		//		  return -EIO;
-	} else {
-		/* Switch off image acquisition */
-		if (reg_write_byte(client, EPC660_REG_SHUTTER_CTRL, 0x00) < 0)
-			return -EIO;
-		/* turn LEDs driver off */
-		if (reg_write_byte(client, EPC660_REG_LED_DRIVER, 0x00) < 0)
-			return -EIO;
-		/* Disable power */
-		if (reg_write_byte(client, EPC660_REG_POWER_CTRL, 0x00) < 0)
-			return -EIO;
-	}
-
 	return 0;
 }
 
@@ -249,39 +219,14 @@ static int epc660_set_fmt(struct v4l2_subdev *sd,
 	struct v4l2_mbus_framefmt *mf = &format->format;
 	struct i2c_client *client = v4l2_get_subdevdata(sd);
 	struct epc660 *epc660 = to_epc660(client);
-	const int centerX = (324 + 4) / 2;
-	const int centerY = (246 + 6) / 2;
-	const int bY = centerY - 1;
-	int lX;
-	int rX;
-	int uY;
-	int walign = 4;
-	int halign = 1;
 
 	if (format->pad)
 		return -EINVAL;
 
-	v4l_bound_align_image(&mf->width, EPC660_MIN_WIDTH, EPC660_MAX_WIDTH,
-			      walign, &mf->height, EPC660_MIN_HEIGHT,
-			      EPC660_MAX_HEIGHT, halign, 0);
 	epc660->fmt =
 		epc660_find_datafmt(mf->code, epc660->fmts, epc660->num_fmts);
 	mf->colorspace = epc660->fmt->colorspace;
 
-	// set the ROI on the EPC
-	lX = (centerX - mf->width / 2) &
-	     ~1; // the ROI has to start at an even offset
-	rX = lX + mf->width - 1;
-	uY = (centerY - mf->height / 2) &
-	     ~1; // the ROI has to start at an even offset
-
-	lX = ((lX >> 8) & 0xff) | ((lX << 8) & 0xff00);
-	rX = ((rX >> 8) & 0xff) | ((rX << 8) & 0xff00);
-	reg_write(client, EPC660_REG_ROI_TL_X_HI, lX);
-	reg_write(client, EPC660_REG_ROI_BR_X_HI, rX);
-	reg_write_byte(client, EPC660_REG_ROI_TL_Y, uY);
-	reg_write_byte(client, EPC660_REG_ROI_BR_Y, bY);
-
 	epc660->rect.width = mf->width;
 	epc660->rect.height = mf->height;
 
-- 
2.44.1

