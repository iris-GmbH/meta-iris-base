From 787be3c0830685221d3f5dd60c51ad6dc60130ac Mon Sep 17 00:00:00 2001
From: Erik Schumacher <erik.schumacher@iris-sensing.com>
Date: Mon, 14 Nov 2022 13:14:52 +0100
Subject: [PATCH] Remove embedded content

Remove cmake scripts that embeds static files in the binary and rewrite
function that serves this content to return nothing
---
 scripts/gen_embedded.py     | 83 -------------------------------------
 src/CMakeLists.txt          |  1 -
 src/main/c/CMakeLists.txt   |  2 +-
 src/main/c/Embedded.cpp     |  5 +++
 src/main/web/CMakeLists.txt | 24 -----------
 5 files changed, 6 insertions(+), 109 deletions(-)
 delete mode 100755 scripts/gen_embedded.py
 create mode 100644 src/main/c/Embedded.cpp
 delete mode 100644 src/main/web/CMakeLists.txt

diff --git a/scripts/gen_embedded.py b/scripts/gen_embedded.py
deleted file mode 100755
index 7bdd21b..0000000
--- a/scripts/gen_embedded.py
+++ /dev/null
@@ -1,83 +0,0 @@
-#!/usr/bin/env python
-
-import os, os.path, sys, argparse
-
-SOURCE_TEMPLATE = """
-#include "internal/Embedded.h"
-
-#include <string>
-#include <unordered_map>
-
-namespace {
-%s
-
-    const std::unordered_map<std::string, EmbeddedContent> embedded = {
-%s
-    };
-
-}  // namespace
-
-const EmbeddedContent* findEmbeddedContent(const std::string& name) {
-    const auto found = embedded.find(name);
-    if (found == embedded.end()) {
-        return nullptr;
-    }
-    return &found->second;
-}\n
-"""
-
-MAX_SLICE = 16
-
-def as_byte(data):
-    if sys.version_info < (3,):
-        return ord(data)
-    else:
-        return data
-
-
-def parse_arguments():
-    parser = argparse.ArgumentParser(description="Embedded content generator")
-    parser.add_argument('--output', '-o', action='store', dest='output_file', type=str, help='Output File', required=True)
-    parser.add_argument('--file', '-f', action='store', nargs='+', dest='input_file', type=str, help='Output File', required=True)
-    return parser.parse_args()
-
-
-def create_file_byte(name, file_bytes):
-    output = []
-    output.append('    const char %s[%d] = {\n' % (name, len(file_bytes) + 1))
-
-    for start in range(0, len(file_bytes), MAX_SLICE):
-        output.append("        " + "".join("'\\x{:02x}',".format(as_byte(x)) for x in file_bytes[start:start+MAX_SLICE]) + "\n")
-    output.append('        0x00,\n')
-    output.append('    };\n')
-    return ''.join(output)
-
-
-def create_file_info(file_list):
-    output = []
-    for name, base, length in file_list:
-        output.append('        {"/%s", { %s, %d }},\n' % (base, name, length))
-    return ''.join(output)
-
-
-def main():
-    args = parse_arguments()
-
-    files = []
-    index = 1
-    file_byte_entries = []
-
-    for file_name in args.input_file:
-        with open(file_name, 'rb') as f:
-            file_bytes = f.read()
-        name = "fileData%d" % index
-        index += 1
-        files.append((name, os.path.basename(file_name), len(file_bytes)))
-        file_byte_entries.append(create_file_byte(name, file_bytes))
-
-    with open(args.output_file, 'w') as output_file:
-        output_file.write(SOURCE_TEMPLATE % (''.join(file_byte_entries), create_file_info(files)))
-
-
-if __name__ == '__main__':
-    main()
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index a5d3c08..6448d63 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -1,5 +1,4 @@
 add_subdirectory(main/c)
-add_subdirectory(main/web)
 
 macro(add_seasocks_executable _name)
     add_executable(${_name} ${ARGN})
diff --git a/src/main/c/CMakeLists.txt b/src/main/c/CMakeLists.txt
index 13f33e8..9d2f898 100644
--- a/src/main/c/CMakeLists.txt
+++ b/src/main/c/CMakeLists.txt
@@ -65,7 +65,7 @@ add_library(seasocks ${SEASOCKS_LIBTYPE}
         util/PathHandler.cpp
         util/RootPageHandler.cpp
         ${WIN_FILES}
-        $<TARGET_OBJECTS:embedded>
+        Embedded.cpp
          "seasocks/StrCompare.h")
 
 set_target_properties(
diff --git a/src/main/c/Embedded.cpp b/src/main/c/Embedded.cpp
new file mode 100644
index 0000000..4acb05d
--- /dev/null
+++ b/src/main/c/Embedded.cpp
@@ -0,0 +1,5 @@
+#include "internal/Embedded.h"
+
+const EmbeddedContent* findEmbeddedContent(const std::string&) {
+    return nullptr;
+}
diff --git a/src/main/web/CMakeLists.txt b/src/main/web/CMakeLists.txt
deleted file mode 100644
index cb67c0a..0000000
--- a/src/main/web/CMakeLists.txt
+++ /dev/null
@@ -1,24 +0,0 @@
-set(SCRIPT "${PROJECT_SOURCE_DIR}/scripts/gen_embedded.py")
-
-
-set(EMBEDDED_FILES
-        "${CMAKE_CURRENT_SOURCE_DIR}/_404.png"
-        "${CMAKE_CURRENT_SOURCE_DIR}/_error.css"
-        "${CMAKE_CURRENT_SOURCE_DIR}/_error.html"
-        "${CMAKE_CURRENT_SOURCE_DIR}/favicon.ico"
-        "${CMAKE_CURRENT_SOURCE_DIR}/_jquery.min.js"
-        "${CMAKE_CURRENT_SOURCE_DIR}/_seasocks.css"
-        "${CMAKE_CURRENT_SOURCE_DIR}/_stats.html"
-        )
-
-
-add_custom_command(OUTPUT Embedded.cpp
-        COMMAND "${PYTHON_EXECUTABLE}" "${SCRIPT}" -o Embedded.cpp -f ${EMBEDDED_FILES}
-        COMMENT "Generating embedded content"
-        DEPENDS "${SCRIPT}"
-        )
-add_library(embedded OBJECT Embedded.cpp)
-target_include_directories(embedded PUBLIC $<TARGET_PROPERTY:seasocks,INTERFACE_INCLUDE_DIRECTORIES>)
-if (SEASOCKS_SHARED)
-    set_property(TARGET embedded PROPERTY POSITION_INDEPENDENT_CODE TRUE)
-endif ()
-- 
2.38.1

