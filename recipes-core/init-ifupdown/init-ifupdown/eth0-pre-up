#!/bin/sh

# SPDX-License-Identifier: MIT
# Copyright (C) 2022 iris-GmbH infrared & intelligent sensors

# filename: eth0-pre-up
# This script configures the eth0 Linux network interface as follows
#
# eth0.0: Interface 1: is the customer-specific network adapter. It can be configured to work as a DHCP client or as a network adapter in static IP mode
# eth0.1: Interface 2: is the service network adapter: Is is always in static IP mode, whereby the IP address is generated from the Mac address
#
# The static ip address for the interface eth0:0 is taken from the /etc/counter/config_customer.json file
# If no ip address or mode can be found, the adapter is configured to work as a DHCP client

validateIp(){
   if expr "$1" : '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$' >/dev/null; then
      # Any address that begins with a 0 is invalid
      if [ "$(echo "$1" | cut -d. -f1)" -lt 1 ]; then
         return 1
      fi
      # Any address with a number above 255 in it is invalid
      for i in 1 2 3 4; do
         if [ "$(echo "$1" | cut -d. -f$i)" -gt 255 ]; then
            return 1
         fi
      done

      return 0
   fi
   
   return 1
}

createIpFromMAC(){
   # read mac from address, extract last bytes and generate ip address
   read -r MAC </sys/class/net/eth0/address
   MAC2=$(printf '%s' "$MAC" | tr ':' ' ')
   MAC5=$(echo $MAC2 | awk '{ print $5 }')
   MAC6=$(echo $MAC2 | awk '{ print $6 }')
   IP=172.16.$((0x${MAC5})).$((0x${MAC6}))
}

createServiceAdapter(){
   # add virtual network adapter with ip generated from mac
   if [ "$ENABLE_SERVICE_ADAPTER" != false ] && validateIp $IP \
      && [ $((0x${MAC5})) -ne 0 ] || [ $((0x${MAC6})) -ne 0 ]; then

      ifconfig eth0:1 $IP netmask 255.254.0.0
      echo "Interface 1: using IP: $IP"
   fi
}

CUSTOMDHCP61ARGUMENT=""
setDhcpOption61Argument(){
   if [ "$CUSTOMDHCP61ACIVATED" = true ]; then
      # removes the quotes at the beginning and the end with sed
      clientIdentifier=$(printf "%s" "$CUSTOMDHCP61CLIENTIDENTIFIER" | sed 's/\(^.\)\|\(.$\)//g' )
      if [ ! "$clientIdentifier" ]; then
         echo "Custom DHCP option 61 is enabled but custom client identifier is empty. Custom option is not used."
         return
      fi
      clientIdentifier=$(printf "%s" "$clientIdentifier" | hexdump  -v -e '/1 "%02X"')
      if ! expr "$clientIdentifier" : "[0-9A-Fa-f]" > /dev/null ; then
         echo "Custom client identifier results in malformed hex string: \"$clientIdentifier\". Custom option is not used."
         return
      fi
      CUSTOMDHCP61ARGUMENT=$(echo "-x 0x3d:00$clientIdentifier")
      return
   fi
}

setToDHCPMode(){
   # Do not modify interface when running from nfs
   if grep -q "root=/dev/nfs" /proc/cmdline
   then
      echo "Interface is already used for nfs"
   # check if udhcpc is already running and start dhcp client
   elif [ -f "/var/run/udhcpc.eth0.pid" ]; then
      echo "DHCP Client is already running"
   else
      setDhcpOption61Argument
      udhcpc -R -b -p /var/run/udhcpc.eth0.pid -i eth0 "$CUSTOMDHCP61ARGUMENT"
   fi
}

createCustomerAdapter(){
   # add virtual adapter from customer configuration
   # validate configuration, if something fails, fall back to dhcp
   # gateway is treated as optional
   if [ -f "$CUSTOMERNETWORKFILE" ] && [ "$CUSTOMERMODE" -eq 0 ]; then

      if validateIp $CUSTOMERIP &&  validateIp $CUSTOMERNETMASK; then
         ifconfig eth0 $CUSTOMERIP netmask $CUSTOMERNETMASK

         if [ $? -eq 0 ]; then
            echo "Interface eth0 reconfigured. IP:$CUSTOMERIP, NETMASK:$CUSTOMERNETMASK"

            if validateIp $CUSTOMERGATEWAY; then
               route add default gw $CUSTOMERGATEWAY eth0
               echo "$CUSTOMERGATEWAY Gateway route added for eth0"
            fi

            return
         fi
      fi  
   fi
   setToDHCPMode
}

parameterExists(){
  param=`echo $json | sed -rn 's/.*"('"$1"')"\s*:.*/\1/p'`
  if [ "$param" = "" ]; then
    false
  else
    true
  fi
}

getIpAddress(){
  adr=`echo $json | sed -rn 's/.*"'"$1"'"\s*:\s*\{\s*"value"\s*:\s*\{\s*"value"\s*:\s*"([^"]*).*/\1/p'`
  echo $adr
}

getParameter(){
  val=`echo $json | sed -rn 's/.*"'"$1"'"\s*:\s*\{\s*"value"\s*:\s*([^,]*).*/\1/p'`
  echo $val
}

# Main function
echo "Network Configuration Script"
createIpFromMAC

CUSTOMERNETWORKFILE="/etc/counter/config_customer.json"
if [ ! -f "$CUSTOMERNETWORKFILE" ]; then
    echo "$0: Can not read $CUSTOMERNETWORKFILE"
    createCustomerAdapter
    createServiceAdapter
    exit 0
fi

# Convert config to single line json so we can regex it with sed
json=`cat $CUSTOMERNETWORKFILE | tr '\n' ' '`

echo "Configuration:"

# service mac based ip adapter
ENABLE_SERVICE_ADAPTER=true 
if parameterExists "pa\.communication\.enableserviceip"; then
   ENABLE_SERVICE_ADAPTER=$(getParameter "pa\.communication\.enableserviceip")
   echo "  pa.communication.enableserviceip:" $ENABLE_SERVICE_ADAPTER
fi

CUSTOMERMODE=1 # 1=dhcp (default), 0=static 
if parameterExists "pa\.communication\.ipaddressconfiguration"; then
   CUSTOMERMODE=$(getParameter "pa\.communication\.ipaddressconfiguration")
   echo "  pa.communication.ipaddressconfiguration:" $CUSTOMERMODE
fi

CUSTOMERIP=""
CUSTOMERNETMASK=""
CUSTOMERGATEWAY=""
CUSTOMDHCP61ACIVATED=""
CUSTOMDHCP61CLIENTIDENTIFIER=""
if parameterExists "pa\.communication\.ipaddr"; then
   CUSTOMERIP=$(getIpAddress "pa\.communication\.ipaddr")
   echo "  pa.communication.ipaddr:" "$CUSTOMERIP"
fi
if parameterExists "pa\.communication\.netmask"; then
   CUSTOMERNETMASK=$(getIpAddress "pa\.communication\.netmask")
   echo "  pa.communication.netmask:" $CUSTOMERNETMASK
fi
if parameterExists "pa\.communication\.gateway"; then
   CUSTOMERGATEWAY=$(getIpAddress "pa\.communication\.gateway")
   echo "  pa.communication.gateway:" "$CUSTOMERGATEWAY"
fi
if parameterExists "pa\.communication\.dhcp_usecustomoption61"; then
   CUSTOMDHCP61ACIVATED=$(getParameter "pa\.communication\.dhcp_usecustomoption61")
   echo "  pa.communication.dhcp_usecustomoption61:" "$CUSTOMDHCP61ACIVATED"
fi
if parameterExists "pa\.communication\.dhcp_customoption61clientidentifier"; then
   CUSTOMDHCP61CLIENTIDENTIFIER=$(getParameter "pa\.communication\.dhcp_customoption61clientidentifier")
   echo "  pa.communication.dhcp_customoption61clientidentifier:" "$CUSTOMDHCP61CLIENTIDENTIFIER"
fi
createCustomerAdapter
createServiceAdapter   
