#!/bin/sh

LAZY_RESET_FLAG="/mnt/iris/lazy_factory_reset"
cable_is_shorted=0

print_info() {
    [ $(("$1" & 0x0001)) -ne 0 ] && printf "GOOD "
    [ $(("$1" & 0x0002)) -ne 0 ] && printf "OPEN "
    [ $(("$1" & 0x0004)) -ne 0 ] && printf "SHORT "
    [ $(("$1" & 0x0008)) -ne 0 ] && printf "XSHORT1 "
    [ $(("$1" & 0x0010)) -ne 0 ] && printf "XSHORT2 "
    [ $(("$1" & 0x0020)) -ne 0 ] && printf "XSHORT3 "
    [ $(("$1" & 0x0040)) -ne 0 ] && printf "SIM "
    [ $(("$1" & 0x0080)) -ne 0 ] && printf "XSIM1 "
    [ $(("$1" & 0x0100)) -ne 0 ] && printf "XSIM2 "
    [ $(("$1" & 0x0200)) -ne 0 ] && printf "XSIM3 "
    [ $(("$1" & 0x0400)) -ne 0 ] && printf "BUSY "
}

# ADIN1200 cable diagnostic
# Test if the cable pairs 1/2 and 3/6 are shorted and store the result in the
# variable: cable_is_shorted: 0: Not shorted, 1: Shorted
# returns 0 on success, 1 otherwise
cable_diagnostic() {
    echo "Start ADIN1200 short check"

    PHY_ID_ADIN1200=0x0283BC20
    id1=$(phytool read eth0/0x1/0x0002)
    id2=$(phytool read eth0/0x1/0x0003)
    id=$(printf '0x%.8X\n' "$(((id1 << 16) | id2))")
    [ "$((id))" -eq "$((PHY_ID_ADIN1200))" ] || return 1

    # Start cable diagnostic
    phytool write eth0/0x1/0x0017 0x1048 # Disbale link
    phytool write eth0/0x1/0x0012 0x0406 # Enable diagnostic clock

    # The cable diagnostic might fail due to active link partner.
    # Try harder if link partner is active.
    retries=5
    while [ "$retries" -gt 0 ]; do
        phytool write eth0/0x1:0x1E/0xBA1B 0x0001 # Run diagnostic
        sleep 0.03
        pair_a=$(phytool read eth0/0x1:0x1E/0xBA1D) # Cable Diagnostics Results 0 Register
        pair_b=$(phytool read eth0/0x1:0x1E/0xBA1E) # Cable Diagnostics Results 1 Register
        [ $((pair_a)) -ne 0 ] && [ $((pair_b)) -ne 0 ] && break
        retries=$((retries-1))
    done

    # Stop cable diagnostic and reset
    phytool write eth0/0x1/0x0012 0x0402 # Disable diagnostic clock
    phytool write eth0/0x1/0x0017 0x3048 # Enable link
    [ "$retries" -gt 0 ] || return 1

    echo "  A: $pair_a $(print_info "$pair_a")"
    echo "  B: $pair_b $(print_info "$pair_b")"

    # 1/2 and 3/6 shorted
    SHORT=0x0004
    if [ $(("$pair_a" & "$SHORT")) -ne 0 ] && [ $(("$pair_b" & "$SHORT")) -ne 0 ]; then
        cable_is_shorted=1
    fi

    return 0
}

# ADIN1200 short detection
# Test if the cable pairs 1/2 and 3/6 are shorted
# Caution: returns 0 on short, 1 otherwise
short_detected() {
	cable_diagnostic || return 1
	[ "$cable_is_shorted" -eq 1 ] && return 0 || return 1
}

reset_systemtime() {
    date_string=$(cat /etc/timestamp)
    year=$(echo "$date_string" | cut -c 1-4)
    month=$(echo "$date_string" | cut -c 5-6)
    day=$(echo "$date_string" | cut -c 7-8)
    hour=$(echo "$date_string" | cut -c 9-10)
    minute=$(echo "$date_string" | cut -c 11-12)
    second=$(echo "$date_string" | cut -c 13-14)
    date -s "$year-$month-$day $hour:$minute:$second"
    hwclock --systohc
    rm -f /mnt/iris/timestamp
}

factory_reset() {
    echo "Factory reset!"
    rm -f /mnt/iris/counter/config_customer*
    rm -f /mnt/iris/counter/config.yaml*
    rm -rf /mnt/iris/counter/webserver # delete possible traces of old location
    rm -rf /mnt/iris/irma6webserver/*
    rm -f /mnt/iris/logging/*.sqlite
    rm -f /mnt/iris/chrony/chrony.conf
    rm -rf /mnt/iris/customer
    rm -rf /mnt/iris/log
    rm -f /mnt/iris/*.conf /mnt/iris/*.conf.bak # syslog-remotes.conf
    rm -f /mnt/iris/rsyslog/*.conf /mnt/iris/rsyslog/*.conf.bak
    rm -f /mnt/iris/switch_log_location
    rm -rf /mnt/iris/device_flags
    # Set default symlinks
    ln -sf /etc/nginx/sites-available/reverse_proxy_https.conf /mnt/iris/nginx/sites-enabled/default_server
    ln -sf /mnt/iris/identity /mnt/iris/webtls
    ln -sf /mnt/iris/identity /mnt/iris/nts
    ln -sf /mnt/iris/identity /mnt/iris/syslogtls
    reset_systemtime
    sync
}
